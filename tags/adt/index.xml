<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ADT on Alessandro Lacava</title>
    <link>/tags/adt/</link>
    <description>Recent content in ADT on Alessandro Lacava</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Sep 2016 14:27:23 +0200</lastBuildDate><atom:link href="/tags/adt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keep your code clean with algebraic data types (ADTs)</title>
      <link>/blog/keep-your-code-clean-with-algebraic-data-types-adts/</link>
      <pubDate>Wed, 14 Sep 2016 14:27:23 +0200</pubDate>
      
      <guid>/blog/keep-your-code-clean-with-algebraic-data-types-adts/</guid>
      <description>Recently, Daniel Westheide wrote an interesting post about the abuse of the Option type in Scala. You can find it here. I couldn&amp;rsquo;t agree more with Daniel.
This short story is another example that demonstrates how using Option is not always the best option (pun intended).
I&amp;rsquo;m developing an advertising service for a customer using Scala. A simplified version of the Ad data structure is the following:
final case class Ad(  headline: String,  description1: String,  description2: String ) At some point they told me we need to support, by adding the headline2 field, two types of ad: standard and expanded.</description>
    </item>
    
  </channel>
</rss>
