<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Optimization on Alessandro Lacava</title>
    <link>/tags/optimization/</link>
    <description>Recent content in Optimization on Alessandro Lacava</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jun 2008 13:33:24 +0000</lastBuildDate>
    <atom:link href="/tags/optimization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Performance differences between IN and EXISTS</title>
      <link>/posts/performance-differences-between-in-and-exists/</link>
      <pubDate>Wed, 04 Jun 2008 13:33:24 +0000</pubDate>
      <guid>/posts/performance-differences-between-in-and-exists/</guid>
      <description>&lt;p&gt;Very often I hear people wondering if it&amp;rsquo;s better the &lt;code&gt;EXISTS&lt;/code&gt; or the &lt;code&gt;IN&lt;/code&gt; operator.&#xA;Let&amp;rsquo;s start by saying that the two operators behave differently when &lt;code&gt;NULL&lt;/code&gt; values are involved&#xA;(see &lt;a href=&#34;/blog/2008/06/04/not-in-vs-not-exists-when-null-values-are-involved&#34;&gt;this post&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;If you are sure that the field used to join the tables does not include &lt;code&gt;NULL&lt;/code&gt; values then the &lt;code&gt;IN&lt;/code&gt; operator &amp;ldquo;generally&amp;rdquo;&#xA;performs better than &lt;code&gt;EXISTS&lt;/code&gt;. I say &amp;ldquo;generally&amp;rdquo; because this is not always the case. For example consider the following query:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why you shouldn&#39;t be concerned about optimization</title>
      <link>/posts/why-you-shouldnt-be-concerned-about-optimization/</link>
      <pubDate>Wed, 11 Oct 2006 16:26:34 +0000</pubDate>
      <guid>/posts/why-you-shouldnt-be-concerned-about-optimization/</guid>
      <description>&lt;p&gt;When you were at the university or in any programming course, you&amp;ndash;like me&amp;ndash;were probably thought of the importance of&#xA;optimization. In the real world though, you should strive for writing good code&amp;ndash;possibly using bullet-proof&#xA;Design Patterns&amp;ndash;and defer optimization until later. Actually, you should optimize your code only if, after testing,&#xA;you realize that optimization is strongly necessary. There are three aphorisms concerning optimization that you cannot&#xA;but know:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;More computing sins are committed in the name of efficiency (without necessarily achieving it) than for any other&#xA;single reason, including blind stupidity.&lt;br /&gt;&#xA;&lt;strong&gt;William A. Wulf&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
