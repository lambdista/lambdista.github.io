<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Case Class on Alessandro Lacava</title>
    <link>http://www.alessandrolacava.com/tags/case-class/</link>
    <description>Recent content in Case Class on Alessandro Lacava</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 May 2015 08:12:07 +0200</lastBuildDate>
    
	<atom:link href="http://www.alessandrolacava.com/tags/case-class/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala case classes in depth</title>
      <link>http://www.alessandrolacava.com/posts/scala-case-classes-in-depth/</link>
      <pubDate>Fri, 22 May 2015 08:12:07 +0200</pubDate>
      
      <guid>http://www.alessandrolacava.com/posts/scala-case-classes-in-depth/</guid>
      <description>For this post I&amp;rsquo;ll consider the following simple case class unless otherwise specified: caseclassPerson(lastname:String,firstname:String,birthYear:Int) 
Common knowledge about case classes When you declare a case class the Scala compiler does the following for you:
 Creates a class and its companion object. Implements the apply method that you can use as a factory. This lets you create instances of the class without the new keyword. E.g.:  valp=Person(&amp;#34;Lacava&amp;#34;,&amp;#34;Alessandro&amp;#34;,1976)// instead of the slightly more verbose: valp=newPerson(&amp;#34;Lacava&amp;#34;,&amp;#34;Alessandro&amp;#34;,1976)   Prefixes all arguments, in the parameter list, with val.</description>
    </item>
    
  </channel>
</rss>