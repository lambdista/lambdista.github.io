<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Not Exists on Alessandro Lacava</title>
    <link>http://www.alessandrolacava.com/tags/not-exists/</link>
    <description>Recent content in Not Exists on Alessandro Lacava</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jun 2008 13:24:09 +0000</lastBuildDate>
    
	<atom:link href="http://www.alessandrolacava.com/tags/not-exists/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NOT IN vs. NOT EXISTS when NULL values are involved</title>
      <link>http://www.alessandrolacava.com/posts/not-in-vs-not-exists-when-null-values-are-involved/</link>
      <pubDate>Wed, 04 Jun 2008 13:24:09 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/posts/not-in-vs-not-exists-when-null-values-are-involved/</guid>
      <description>NOT IN does not behave as you would expect when NULL values are involved. Suppose you have the following tables:
 CD_FIELD DS_FIELD  1 ALPHA   2 BETA   TABLE_A
 CD_FIELD DS_FIELD  1 GAMMA   NULL DELTA   TABLE_B
Now try the following query:
SELECT*FROMtable_aaWHEREa.cd_fieldNOTIN(SELECTb.cd_fieldFROMtable_bb);  Does the previous query return any row? The answer is NO it doesn&amp;rsquo;t, even if there is a value (2) in table_a.</description>
    </item>
    
  </channel>
</rss>