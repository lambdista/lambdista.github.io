<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alessandro Lacava]]></title>
  <link href="http://www.alessandrolacava.com/atom.xml" rel="self"/>
  <link href="http://www.alessandrolacava.com/"/>
  <updated>2016-09-14T15:11:17+02:00</updated>
  <id>http://www.alessandrolacava.com/</id>
  <author>
    <name><![CDATA[Alessandro Lacava]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keep Your Code Clean With Algebraic Data Types (ADTs)]]></title>
    <link href="http://www.alessandrolacava.com/blog/keep-your-code-clean-with-algebraic-data-types-adts/"/>
    <updated>2016-09-14T14:27:23+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/keep-your-code-clean-with-algebraic-data-types-adts</id>
    <content type="html"><![CDATA[<p>Recently, Daniel Westheide wrote an interesting post about the abuse of the <code>Option</code> type
in Scala.
You can find it <a href="http://danielwestheide.com/blog/2016/04/26/when-option-is-not-good-enough.html">here</a>.
I couldn&rsquo;t agree more with Daniel.</p>

<p>This short story is another example that demonstrates how using <code>Option</code> is not always
the best option (pun intended).</p>

<p>I&rsquo;m developing an advertising service for a customer using Scala.
A simplified version of the <code>Ad</code> data structure is the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Ad</span><span class="o">(</span>
</span><span class='line'>    <span class="n">headline</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>    <span class="n">description1</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>    <span class="n">description2</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At some point they told me we need to support, by adding the <code>headline2</code> field,
two types of ad: standard and expanded.
They said: &ldquo;If <code>headline</code>, <code>description1</code>, and <code>description2</code> are used, it is a standard ad.
If <code>headline</code>, <code>headline2</code>, and <code>description1</code> are used it is an expanded one.
Users won&rsquo;t include <code>headline2</code> when the ad is intended to be standard, and won&rsquo;t include <code>description2</code>
when the ad is intended to be expanded.&rdquo;</p>

<p>The optionality of the <code>headline2</code> and <code>description2</code> fields could put you in the wrong direction.
Indeed, you could think of changing the data structure as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Ad</span><span class="o">(</span>
</span><span class='line'>    <span class="n">headline</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>    <span class="n">headline2</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span>
</span><span class='line'>    <span class="n">description1</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>    <span class="n">description2</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This may sound fine but you could reach a much cleaner and type-safe
solution using a simple Algebraic Data Type (ADT). Here&rsquo;s how:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Ad</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Ad</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Standard</span><span class="o">(</span>
</span><span class='line'>      <span class="n">headline</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>      <span class="n">description1</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>      <span class="n">description2</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'>  <span class="o">)</span> <span class="k">extends</span> <span class="nc">Ad</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Expanded</span><span class="o">(</span>
</span><span class='line'>      <span class="n">headline</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>      <span class="n">headline2</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>      <span class="n">description1</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'>  <span class="o">)</span> <span class="k">extends</span> <span class="nc">Ad</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way you don&rsquo;t need to inspect the <code>headline2</code> and/or <code>description2</code> value
to find out the ad type you&rsquo;re dealing with.
Indeed, the ad type is encoded in the type system which is always a <em>desiderata</em>.</p>

<p>Bottom line: use <code>Option</code> with caution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala: Seq, Map and Set as Functions]]></title>
    <link href="http://www.alessandrolacava.com/blog/scala-seq-map-and-set-as-functions/"/>
    <updated>2015-10-23T10:24:00+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/scala-seq-map-and-set-as-functions</id>
    <content type="html"><![CDATA[<p>Yesterday my mate asked me: &ldquo;I have a <code>List[String]</code> and a <code>Map[String, Int]</code> and I want
a <code>List[Int]</code> where its values are those of the <code>Map</code> whose keys match the <code>List[String]</code> elements,
maintaining the order. Should I use pattern matching?&rdquo;. I know, the sentence is a bit convoluted but the
code will make it clear, hopefully. Anyway, I replied: &ldquo;No, you don&rsquo;t need pattern matching, you just need this&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">m</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;a&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&quot;b&quot;</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&quot;c&quot;</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="n">m</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Map</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">,</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">l</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">l</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">l</span> <span class="n">collect</span> <span class="n">m</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hold on, how does it work? If you look at the definition of the <code>collect</code> method you&rsquo;ll see it accepts a
<code>PartialFunction</code>, instead I passed a <code>Map</code> to it.
Well, it turns out that <code>Map</code> <em>is</em> a <code>PartialFunction</code>.</p>

<p>Since this peculiarity surprised him I decided to write a small post showing how Scala&rsquo;s <code>Map</code>,
<code>List</code> (actually <code>Seq</code>) and <code>Set</code> can be viewed as functions.</p>

<p><a name="functions_vs_partial_functions"></a></p>

<h2>Before starting: functions vs partial functions</h2>

<p>In short, a function is a mapping <code>A =&gt; B</code> that relates each value of type <code>A</code> to a
value of type <code>B</code>&ndash;modulo <em>bottom</em>. <code>A</code> and <code>B</code> are called <em>domain</em> and <em>codomain</em>, respectively. If you&rsquo;re not a math
addict, roughly speaking, the domain is the set of all values that you may provide as input to your function,
while the codomain is the result of the function application to the input, that is your function output.<br/>
On the other hand a partial function from <code>A</code> to <code>B</code> is not defined for some inputs of type <code>A</code>. E.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// function</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">abs</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=&gt;</span> <span class="nc">Double</span> <span class="k">=</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">x</span> <span class="k">else</span> <span class="o">-</span><span class="n">x</span>
</span><span class='line'><span class="n">abs</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=&gt;</span> <span class="nc">Double</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">abs</span><span class="o">(</span><span class="mi">42</span><span class="o">)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">42.0</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">abs</span><span class="o">(-</span><span class="mi">42</span><span class="o">)</span>
</span><span class='line'><span class="n">res2</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">42.0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// partial function</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">sqrt</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">Double</span>, <span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>     <span class="o">|</span>   <span class="k">case</span> <span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">=&gt;</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">sqrt</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'><span class="n">res3</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">2.0</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">sqrt</span><span class="o">(-</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="n">scala</span><span class="o">.</span><span class="nc">MatchError</span><span class="k">:</span> <span class="kt">-</span><span class="err">1</span><span class="kt">.</span><span class="err">0</span> <span class="o">(</span><span class="kt">of</span> <span class="kt">class</span> <span class="kt">java.lang.Double</span><span class="o">)</span>
</span><span class='line'>  <span class="kt">at</span> <span class="kt">scala.PartialFunction$$anon$1.apply</span><span class="o">(</span><span class="kt">PartialFunction.scala:</span><span class="err">253</span><span class="o">)</span>
</span><span class='line'>  <span class="kt">at</span> <span class="kt">scala.PartialFunction$$anon$1.apply</span><span class="o">(</span><span class="kt">PartialFunction.scala:</span><span class="err">251</span><span class="o">)</span>
</span><span class='line'>  <span class="kt">at</span> <span class="kt">$anonfun$1.applyOrElse</span><span class="o">(</span><span class="kt">&lt;console</span><span class="k">&gt;:</span><span class="err">7</span><span class="o">)</span>
</span><span class='line'>  <span class="kt">at</span> <span class="kt">$anonfun$1.applyOrElse</span><span class="o">(</span><span class="kt">&lt;console</span><span class="k">&gt;:</span><span class="err">7</span><span class="o">)</span>
</span><span class='line'>  <span class="kt">at</span> <span class="kt">scala.runtime.AbstractPartialFunction$mcDD$sp.apply$mcDD$sp</span><span class="o">(</span><span class="kt">AbstractPartialFunction.scala:</span><span class="err">36</span><span class="o">)</span>
</span><span class='line'>  <span class="kt">...</span> <span class="err">33</span> <span class="kt">elided</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>PartialFunction</code> definition is the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">PartialFunction</span><span class="o">[</span><span class="kt">-A</span>, <span class="kt">+B</span><span class="o">]</span> <span class="nc">extends</span> <span class="o">(</span><span class="n">A</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">B</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is a <code>PartialFunction</code> is a <code>Function</code> that will just <em>throw</em> for those inputs the partial function is not
defined at. So you can use a <code>PartialFunction</code> wherever a <code>Function</code> is expected. Just keep in mind you&rsquo;ll get
an exception for some input values.</p>

<h2>Seq[A] as PartialFunction[Int, A]</h2>

<p>Being <code>List</code> an indirect subclass of <code>collection.Seq</code> and given that the latter has the following definition, you
can see clearly that every <code>Seq[A]</code> is also a <code>PartialFunction[Int, A]</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Seq</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">PartialFunction</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">A</span><span class="o">]</span> <span class="k">with</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">xs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">l</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">f1</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">xs</span>
</span><span class='line'><span class="n">f1</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">Int</span>,<span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">f1</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="n">res4</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course I could have used <code>xs</code> directly without the assignment to <code>f1</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">xs</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="n">res2</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>I assigned the list to <code>f1</code> just to emphasise the fact that it&rsquo;s a partial function. It corresponds to the
index-based lookup.</p>

<p><strong>Performance concern</strong>: Take into account that the index-based lookup on <code>List</code> has a cost of <code>O(n)</code>. For this type
of access you may consider using a <code>Vector</code> which has constant-time access cost. Anyway this post is not about
performance concerns about the collection API so I won&rsquo;t dig into this topic.</p>

<h2>Map[A, B] as PartialFunction[A, B]</h2>

<p>If you look at the <code>Map</code> definition you&rsquo;ll see that it extends <code>MapLike</code> which, in turn, extends <code>PartialFunction</code>.
So you can use it as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">m</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;a&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&quot;b&quot;</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&quot;c&quot;</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">,</span> <span class="s">&quot;d&quot;</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'><span class="n">m</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Map</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">,</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">,</span> <span class="n">d</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">f2</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">m</span>
</span><span class='line'><span class="n">f2</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">,</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">,</span> <span class="n">d</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">f2</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">res5</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Set[A] as A => Boolean</h2>

<p>Here&rsquo;s the definition of <code>Set</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Set</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="nc">extends</span> <span class="o">(</span><span class="n">A</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Boolean</span> <span class="k">with</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>It, evidently, extends <code>A =&gt; Boolean</code> which, as you probably already know, is just syntactic sugar for the more
verbose <code>Function[A, Boolean]</code>. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">s</span> <span class="k">=</span> <span class="nc">Set</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">s</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Set</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Set</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">f3</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span> <span class="k">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">f3</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span> <span class="k">=</span> <span class="nc">Set</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">f3</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">res6</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, for instance, you can use a set to filter a list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">xs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">xs</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">s</span> <span class="k">=</span> <span class="nc">Set</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;d&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">s</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Set</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Set</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">d</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">xs</span> <span class="n">filter</span> <span class="n">s</span>
</span><span class='line'><span class="n">res7</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusions</h2>

<p>As a final consideration take into account that <code>Seq</code>s and <code>Map</code>s are partial functions while <code>Set</code> is a
function. Partial functions could introduce insidious bugs.
For instance, consider the very first example of this post.
If the <code>Map</code> hadn&rsquo;t contained all the elements of the <code>List</code> and I had used
the <code>map</code> method instead of <code>collect</code> I would have introduced a bug:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">xs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;d&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">xs</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">m</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;a&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="n">m</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Map</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">xs</span> <span class="n">map</span> <span class="n">m</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">NoSuchElementException</span><span class="k">:</span> <span class="kt">key</span> <span class="kt">not</span> <span class="kt">found:</span> <span class="kt">b</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">scala</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="nc">MapLike$class</span><span class="o">.</span><span class="n">default</span><span class="o">(</span><span class="nc">MapLike</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">228</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">scala</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="nc">AbstractMap</span><span class="o">.</span><span class="n">default</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">59</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">scala</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="nc">MapLike$class</span><span class="o">.</span><span class="n">apply</span><span class="o">(</span><span class="nc">MapLike</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">141</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">scala</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="nc">AbstractMap</span><span class="o">.</span><span class="n">apply</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">59</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">scala</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">immutable</span><span class="o">.</span><span class="nc">List</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">277</span><span class="o">)</span>
</span><span class='line'>  <span class="o">...</span> <span class="mi">33</span> <span class="n">elided</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is because <code>map</code> accepts a function and providing a partial function instead you get the exception for not valid
inputs as I said in the <a href="#functions_vs_partial_functions">functions vs partial functions section</a>.</p>

<p>From now on, whenever you have a collection hanging around, consider looking at it as a
function. This could help to solve your problem without using pattern matching or other boilerplate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Case Classes In Depth]]></title>
    <link href="http://www.alessandrolacava.com/blog/scala-case-classes-in-depth/"/>
    <updated>2015-05-22T08:12:07+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/scala-case-classes-in-depth</id>
    <content type="html"><![CDATA[<p>For this post I&rsquo;ll consider the following simple case class unless otherwise specified:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="n">lastname</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">firstname</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">birthYear</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Common knowledge about case classes</h2>

<p>When you declare a case class the Scala compiler does the following for you:</p>

<ul>
<li>Creates a class and its companion object.</li>
<li>Implements the <code>apply</code> method that you can use as a factory. This lets you create
instances of the class without the <code>new</code> keyword. E.g.:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;Lacava&quot;</span><span class="o">,</span> <span class="s">&quot;Alessandro&quot;</span><span class="o">,</span> <span class="mi">1976</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// instead if the slightly more verbose:</span>
</span><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;Lacava&quot;</span><span class="o">,</span> <span class="s">&quot;Alessandro&quot;</span><span class="o">,</span> <span class="mi">1976</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Prefixes all arguments, in the parameter list, with <code>val</code>. This means the class is immutable, hence
you get the accessors but no mutators. E.g.:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">lastname</span> <span class="k">=</span> <span class="n">p</span><span class="o">.</span><span class="n">lastname</span>
</span><span class='line'><span class="c1">// the following won&#39;t compile:</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="n">lastname</span> <span class="k">=</span> <span class="s">&quot;Brown&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Adds <em>natural</em> implementations of <code>hashCode</code>, <code>equals</code> and <code>toString</code>. Since <code>==</code> in Scala always
delegates to equals, this means that case class instances are always compared structurally. E.g.:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p_1</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;Brown&quot;</span><span class="o">,</span> <span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="mi">1969</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">p_2</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;Lacava&quot;</span><span class="o">,</span> <span class="s">&quot;Alessandro&quot;</span><span class="o">,</span> <span class="mi">1976</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">==</span> <span class="n">p_1</span> <span class="c1">// false</span>
</span><span class='line'><span class="n">p</span> <span class="o">==</span> <span class="n">p_2</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Generates a <code>copy</code> method to your class to create other instances starting from another one and keeping
some arguments the same. E.g.: Create another instance keeping the <code>lastname</code> and changing <code>firstname</code>
and <code>birthYear</code>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// the result is: Person(Lacava,Michele,1972), my brother :)</span>
</span><span class='line'><span class="k">val</span> <span class="n">p_3</span> <span class="k">=</span> <span class="n">p</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">firstname</span> <span class="k">=</span> <span class="s">&quot;Michele&quot;</span><span class="o">,</span> <span class="n">birthYear</span> <span class="k">=</span> <span class="mi">1972</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Probably, most importantly, since the compiler implements the <code>unapply</code> method, a case class
supports pattern matching. This is especially important when you define an Algebraic Data Type (ADT). E.g.:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Maybe</span><span class="o">[</span><span class="kt">+T</span><span class="o">]</span>
</span><span class='line'><span class="nc">case</span> <span class="k">class</span> <span class="nc">Value</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">value</span><span class="k">:</span> <span class="kt">T</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Maybe</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">NoValue</span> <span class="k">extends</span> <span class="nc">Maybe</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">v</span><span class="k">:</span> <span class="kt">Maybe</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Value</span><span class="o">(</span><span class="mi">42</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">v_1</span><span class="k">:</span> <span class="kt">Maybe</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">NoValue</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">logValue</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">value</span><span class="k">:</span> <span class="kt">Maybe</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">value</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Value</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;We have a value here: $v&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">NoValue</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;I&#39;m sorry, no value&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">logValue</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="c1">// prints We have a value here: 42</span>
</span><span class='line'><span class="n">logValue</span><span class="o">(</span><span class="n">v_1</span><span class="o">)</span> <span class="c1">// prints I&#39;m sorry, no value</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you probably already know, when your class has no argument you use a <code>case object</code>
instead of a <code>case class</code> with an empty parameter list.</p>

<p>Apart from being used in pattern matching the <code>unapply</code> method lets you <em>deconstruct</em> a case class to extract
it&rsquo;s fields, both during pattern matching and as a simple expression to extract some of its fields. E.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="nc">Person</span><span class="o">(</span><span class="n">lastname</span><span class="o">,</span> <span class="k">_</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=</span> <span class="n">p</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">lastname</span><span class="o">)</span> <span class="c1">// prints Lacava</span>
</span></code></pre></td></tr></table></div></figure>


<h2><em>Not so common</em> knowledge about case classes</h2>

<ul>
<li>What if you need a function that, given your case class arguments as parameters, creates an instance of the class?
Here&rsquo;s how you can do it by partially applying <code>apply</code> (no pun intended :)):</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">personCreator</span><span class="k">:</span> <span class="o">(</span><span class="kt">String</span><span class="o">,</span> <span class="kt">String</span><span class="o">,</span> <span class="nc">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Person</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">.</span><span class="n">apply</span> <span class="k">_</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the result is: Person(Brown,John,1969)</span>
</span><span class='line'><span class="n">personCreator</span><span class="o">(</span><span class="s">&quot;Brown&quot;</span><span class="o">,</span> <span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="mi">1969</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>What if you want your function, from the previous point, to be curried? Enters the <code>curried</code> method:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">curriedPerson</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">String</span> <span class="k">=&gt;</span> <span class="nc">Int</span> <span class="k">=&gt;</span> <span class="nc">Person</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">.</span><span class="n">curried</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">lacavaBuilder</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=&gt;</span> <span class="nc">Person</span> <span class="k">=</span> <span class="n">curriedPerson</span><span class="o">(</span><span class="s">&quot;Lacava&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">me</span> <span class="k">=</span> <span class="n">lacavaBuilder</span><span class="o">(</span><span class="s">&quot;Alessandro&quot;</span><span class="o">)(</span><span class="mi">1976</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">myBrother</span> <span class="k">=</span> <span class="n">lacavaBuilder</span><span class="o">(</span><span class="s">&quot;Michele&quot;</span><span class="o">)(</span><span class="mi">1972</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>What about obtaining a function that accepts a tuple whose arity is equal to the number of the case class
arguments, and produces an instance of the class? Well, there&rsquo;s the <code>tupled</code> method for that:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">tupledPerson</span><span class="k">:</span> <span class="o">((</span><span class="kt">String</span><span class="o">,</span> <span class="kt">String</span><span class="o">,</span> <span class="kt">Int</span><span class="o">))</span> <span class="k">=&gt;</span> <span class="nc">Person</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">.</span><span class="n">tupled</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">meAsTuple</span><span class="k">:</span> <span class="o">(</span><span class="kt">String</span><span class="o">,</span> <span class="kt">String</span><span class="o">,</span> <span class="nc">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;Lacava&quot;</span><span class="o">,</span> <span class="s">&quot;Alessandro&quot;</span><span class="o">,</span> <span class="mi">1976</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">meAsPersonAgain</span><span class="k">:</span> <span class="kt">Person</span> <span class="o">=</span> <span class="n">tupledPerson</span><span class="o">(</span><span class="n">meAsTuple</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You could also need a function that, given an instance of your class as input, produces an
<code>Option[TupleN[A1, A2, ..., AN]]</code> as output, where <code>N</code> is the number of the case class arguments and
<code>A1, A2, ..., AN</code> are their types. E.g.:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">toOptionOfTuple</span><span class="k">:</span> <span class="kt">Person</span> <span class="o">=&gt;</span> <span class="nc">Option</span><span class="o">[(</span><span class="kt">String</span>, <span class="kt">String</span>, <span class="kt">Int</span><span class="o">)]</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">.</span><span class="n">unapply</span> <span class="k">_</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[(</span><span class="kt">String</span>, <span class="kt">String</span>, <span class="kt">Int</span><span class="o">)]</span> <span class="k">=</span> <span class="n">toOptionOfTuple</span><span class="o">(</span><span class="n">p</span><span class="o">)</span> <span class="c1">// Some((Lacava,Alessandro,1976))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>curried</code> and <code>tupled</code> methods are inherited from <code>AbstractFunctionN</code> which is extended by the autogenerated
companion object. <code>N</code> is the number of the case class formal parameters.
Note that, of course, if <code>N = 1</code> you won&rsquo;t get <code>curried</code> and <code>tupled</code> because
they wouldn&rsquo;t make sense for just one parameter!</p>

<h2>Defining a case class using the <em>curried</em> form</h2>

<p>There&rsquo;s another less-known way of defining a case class, e.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Keyword</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="n">source</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">foo</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The formal parameters in the first parameter section of a case class (just <code>text</code> in this case) are called <em>elements</em>;
they are treated specially. All the goodies you get when you define a case class (accessors, pattern matching support,
copy method, &hellip;) only apply to the first section. For example you don&rsquo;t have an accessor for <code>source</code> since
the compiler didn&rsquo;t implicitly prefix it with <code>val</code>, like it did for <code>text</code> instead. E.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">k1</span> <span class="k">=</span> <span class="nc">Keyword</span><span class="o">(</span><span class="s">&quot;restaurant&quot;</span><span class="o">)(</span><span class="s">&quot;storage&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// won&#39;t compile</span>
</span><span class='line'><span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="n">k1</span><span class="o">.</span><span class="n">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can solve the accessor problem by prefixing the parameters with <code>val</code>. E.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Keyword</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="k">val</span> <span class="n">source</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="k">val</span> <span class="n">foo</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anyway you still won&rsquo;t get all the other case class features.
For instance, you cannot use the <code>copy</code> method by specifying only the <code>source</code> parameter. You have to specify, at least, all the parameters
of the sections successive to the first. E.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// won&#39;t compile</span>
</span><span class='line'><span class="k">val</span> <span class="n">k2</span> <span class="k">=</span> <span class="n">k1</span><span class="o">.</span><span class="n">copy</span><span class="o">()(</span><span class="n">source</span> <span class="k">=</span> <span class="s">&quot;web&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// will compile</span>
</span><span class='line'><span class="k">val</span> <span class="n">k3</span> <span class="k">=</span> <span class="n">k1</span><span class="o">.</span><span class="n">copy</span><span class="o">()(</span><span class="n">source</span> <span class="k">=</span> <span class="s">&quot;web&quot;</span><span class="o">,</span> <span class="n">foo</span> <span class="k">=</span> <span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the companion object of a case class defined in such a way won&rsquo;t extend <code>AbstractFunctionN</code>, so the <code>tupled</code>
and <code>curried</code> methods are not available.</p>

<p>At this point the natural question that may arise is: &ldquo;Why on earth should I want to define a case class in such a way?&rdquo;
Apparently there are cases when it could be a <em>reasonable</em> choice. For example suppose that, for your business model,
two instances of <code>Keyword</code> are to be considered equal iff they have the same <code>text</code> field. Well, in such a case by defining the
case class using the <em>curried</em> form you&rsquo;ll get what you want. E.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">k1</span> <span class="k">=</span> <span class="nc">Keyword</span><span class="o">(</span><span class="s">&quot;restaurant&quot;</span><span class="o">)(</span><span class="s">&quot;storage&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">k2</span> <span class="k">=</span> <span class="nc">Keyword</span><span class="o">(</span><span class="s">&quot;restaurant&quot;</span><span class="o">)(</span><span class="s">&quot;web&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">k1</span> <span class="o">==</span> <span class="n">k2</span> <span class="c1">// true!</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s because also the <code>equals</code> implementation, you get for free for case classes, only applies to the first
parameter section, so only to <code>text</code> in this case. I&rsquo;m not saying here that this is always the best choice
but it could be of help in certain situations.</p>

<p>In fact, you could define your case class as usual and override <code>equals</code> on your own. However overriding
<code>equals</code> is not very trivial. Indeed, before doing that
I recommend you read the <a name="programmingInScala"></a>chapter 30 of
<strong>Programming in Scala: A Comprehensive Step-by-Step Guide,
2nd Edition - Odersky, Spoon, Venners</strong>. Its title is
<strong>Object Equality</strong> and it&rsquo;s just 25 pages long!</p>

<h2>For the most curious ones</h2>

<p>Furthermore, since each case class extends the <code>Product</code> trait it inherits the following methods:</p>

<ul>
<li><code>def productArity: Int</code>, returns the size of this product. In this case it corresponds to the number of arguments in the
case class. E.g.:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;Lacava&quot;</span><span class="o">,</span> <span class="s">&quot;Alessandro&quot;</span><span class="o">,</span> <span class="mi">1976</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">arity</span> <span class="k">=</span> <span class="n">p</span><span class="o">.</span><span class="n">productArity</span> <span class="c1">// equals to 3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>def productElement(n: Int): Any</code>, returns the n-th element of this product, 0-based. In this case it corresponds to
the n-th argument of the class. E.g.:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">lastname</span><span class="k">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">productElement</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="c1">// Lacava</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>def productIterator: Iterator[Any]</code>, returns an iterator over all the elements of this product which,
in the case class context, they are its arguments.</p></li>
<li><p><code>def productPrefix: String</code>, returns a string used in the <code>toString</code> method of the derived classes.
In this case it&rsquo;s the name of the class. E.g.:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">className</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">productPrefix</span> <span class="c1">// the result is Person</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Final Notes</h2>

<ul>
<li><p>I used type declarations in many expressions just to make things clearer. Of course I could have left them out
and let the type inferer do its job.</p></li>
<li><p>Some <code>Product</code>&rsquo;s methods return <em>Any-based</em> types, namely <code>productElement</code> and <code>productIterator</code>. For example,
<code>p.productElement(0)</code> returns the <code>lastname</code> but it is of type <code>Any</code> so if you need to use it as <code>String</code> you have to
cast it, which is an operation you should strive to avoid as much as possible.</p></li>
<li><p><code>Product</code> extends <code>Equals</code> so every case class also inherits the <code>canEqual</code> method but, of course,
going into its details is not the scope of this post. Besides, you don&rsquo;t have to worry about it because it&rsquo;s
used interally by the autogenerated <code>equals</code> method, unless you decide to implement your own version of <code>equals</code>
in which case you need to take into account <code>canEqual</code>. Again, in such a case I strongly suggest you read the
chapter cited <a href="#programmingInScala">here</a>.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala's Self-recursive Types]]></title>
    <link href="http://www.alessandrolacava.com/blog/scala-self-recursive-types/"/>
    <updated>2015-03-30T14:59:24+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/scala-self-recursive-types</id>
    <content type="html"><![CDATA[<p>One of the advantages of using a statically typed language is that you can use the type system to enforce
some constraints. Scala provides <em>self-recursive types</em>, aka <em>F-bounded polymorphic types</em>
that&ndash;along with <em>self types</em>&ndash;let you put powerful constraint to your type definitions.</p>

<h2>Self-recursive type definition</h2>

<p>Terminology apart, let me show you one of the use cases where this could be useful. Consider the following example
which does not use a self-recursive type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Doubler</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">double</span><span class="k">:</span> <span class="kt">T</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Square</span><span class="o">(</span><span class="n">base</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Doubler</span><span class="o">[</span><span class="kt">Square</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">double</span><span class="k">:</span> <span class="kt">Square</span> <span class="o">=</span> <span class="nc">Square</span><span class="o">(</span><span class="n">base</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far so good, the compiler will not complain. The problem is that it won&rsquo;t complain even if you write
something outrageous like the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="n">firstname</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">lastname</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Square</span><span class="o">(</span><span class="n">base</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Doubler</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">double</span><span class="k">:</span> <span class="kt">Person</span> <span class="o">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;Smith&quot;</span><span class="o">,</span> <span class="mi">42</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You want to avoid something like that by enforcing a compile-time check. Enters a self-recursive type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Doubler</span><span class="o">[</span><span class="kt">T</span> <span class="k">&lt;:</span> <span class="kt">Doubler</span><span class="o">[</span><span class="kt">T</span><span class="o">]]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">double</span><span class="k">:</span> <span class="kt">T</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using this definition of <code>Doubler</code> you&rsquo;re saying: &ldquo;Hey, if someone tries to extends <code>Doubler</code> with a type
which doesn&rsquo;t extend <code>Doubler</code> in turn (hence <em>self-recursive</em>), do not compile it&rdquo;.
In this case the previous definition of <code>Square</code>, which extends <code>Doubler[Person]</code>, doesn&rsquo;t compile.</p>

<p>Note that self-recursive types are not specific to Scala. Indeed Java uses them too.
Take, for example, the <code>Enum</code> definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Enum</span><span class="o">&lt;</span><span class="n">E</span> <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>E extends Enum&lt;E&gt;</code> in <em>Javanese</em> means exactly <code>E &lt;: Enum[E]</code></p>

<h2>Self type definition</h2>

<p>F-bounded polymorphic types are of great help but sometimes they are not enough to enforce the constraints you need.
Indeed, the previous definition of <code>Doubler</code> has still one problem. Consider the next code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Doubler</span><span class="o">[</span><span class="kt">T</span> <span class="k">&lt;:</span> <span class="kt">Doubler</span><span class="o">[</span><span class="kt">T</span><span class="o">]]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">double</span><span class="k">:</span> <span class="kt">T</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Square</span><span class="o">(</span><span class="n">base</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Doubler</span><span class="o">[</span><span class="kt">Square</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">double</span><span class="k">:</span> <span class="kt">Square</span> <span class="o">=</span> <span class="nc">Square</span><span class="o">(</span><span class="n">base</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Apple</span><span class="o">(</span><span class="n">kind</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Doubler</span><span class="o">[</span><span class="kt">Square</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">double</span><span class="k">:</span> <span class="kt">Square</span> <span class="o">=</span> <span class="nc">Square</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you spot the problem? Look at the <code>Apple</code> definition, it extends <code>Doubler[Square]</code> instead of <code>Doubler[Apple]</code>.</p>

<p>This code compiles because it respects the constraint put by the <code>Doubler</code> definition.
Indeed <code>Square</code> extends <code>Doubler</code> so it can be used in <code>Apple</code>. Sometimes this is what you want in which case
the self-recursive type will do. In cases when you don’t want this to happen a self type can work this out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Doubler</span><span class="o">[</span><span class="kt">T</span> <span class="k">&lt;:</span> <span class="kt">Doubler</span><span class="o">[</span><span class="kt">T</span><span class="o">]]</span> <span class="o">{</span> <span class="n">self</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">double</span><span class="k">:</span> <span class="kt">T</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you try to compile the previous definition of <code>Apple</code> the compiler will complain by saying something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">error</span><span class="k">:</span> <span class="kt">illegal</span> <span class="kt">inheritance</span><span class="o">;</span>
</span><span class='line'> <span class="n">self</span><span class="o">-</span><span class="k">type</span> <span class="kt">Apple</span> <span class="kt">does</span> <span class="kt">not</span> <span class="kt">conform</span> <span class="kt">to</span> <span class="kt">Doubler</span><span class="o">[</span><span class="kt">Square</span><span class="o">]</span><span class="-Symbol">&#39;s</span> <span class="n">selftype</span> <span class="nc">Square</span>
</span><span class='line'>       <span class="k">case</span> <span class="k">class</span> <span class="nc">Apple</span><span class="o">(</span><span class="n">kind</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Doubler</span><span class="o">[</span><span class="kt">Square</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>                                              <span class="o">^</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusions</h2>

<p>If you&rsquo;re thinking: &ldquo;Come on! I would never extend <code>Apple</code> that way because I know what I meant when I wrote
my <code>Doubler</code> abstraction. I don&rsquo;t need then the self type annotation and, since I know what I&rsquo;m doing,
I don&rsquo;t need the self-recursive type either&rdquo;. Well you may be right but I&rsquo;d have two objections:</p>

<ol>
<li><p>Generally you are not the only one working on a project and, anyway, a good rule of thumb is to design your
software as if you&rsquo;re designing a public API. In this case you want to be sure no one will use your API in the wrong way.</p></li>
<li><p>Compilers are implemented by smart guys, generally. Having the compiler help by your side is
always a good thing in my humble opinion.</p></li>
</ol>


<p>Are there alternatives to this type of problems? Yes indeed, <em>Type Classes</em>, which is by the way the option I prefer.
But this is another story for a future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Internal DSLs In Scala]]></title>
    <link href="http://www.alessandrolacava.com/blog/introduction-to-internal-dsls-in-scala/"/>
    <updated>2015-03-26T09:41:48+01:00</updated>
    <id>http://www.alessandrolacava.com/blog/introduction-to-internal-dsls-in-scala</id>
    <content type="html"><![CDATA[<p>My introductory article on developing an internal DSL in Scala for currency-related operations
on <a href="http://www.devx.com/enterprise/introduction-to-internal-dsls-in-scala.html">DevX</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Functional Programming In Scala]]></title>
    <link href="http://www.alessandrolacava.com/blog/introduction-to-functional-programming-in-scala/"/>
    <updated>2015-02-28T09:29:30+01:00</updated>
    <id>http://www.alessandrolacava.com/blog/introduction-to-functional-programming-in-scala</id>
    <content type="html"><![CDATA[<p>My introductory article on Functional Programming in Scala
on <a href="http://www.devx.com/enterprise/introduction-to-functional-programming-in-scala.html">DevX</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala DSL for Currency-related Operations]]></title>
    <link href="http://www.alessandrolacava.com/blog/scala-dsl-for-currency-related-operations/"/>
    <updated>2015-02-20T15:09:06+01:00</updated>
    <id>http://www.alessandrolacava.com/blog/scala-dsl-for-currency-related-operations</id>
    <content type="html"><![CDATA[<h3>A simple internal DSL in Scala for money-related operations</h3>

<p>Source code: <a href="https://github.com/lambdista/money">Scala DSL for money-related operations</a></p>

<p>This Domain-Specific Language (DSL) lets you perform operations among different currencies,
by transparently doing all internal conversions. The conversion map is injected implicitly by the client code.</p>

<h3>Usage Example</h3>

<p>Here&rsquo;s a simple usage example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">com.lambdista.money._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.lambdista.money.Currency._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">conversion</span><span class="k">:</span> <span class="kt">Conversion</span> <span class="o">=</span> <span class="nc">Map</span><span class="o">(</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">GBP</span><span class="o">,</span> <span class="nc">EUR</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mf">1.270</span><span class="o">,</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">EUR</span><span class="o">,</span> <span class="nc">USD</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mf">1.268</span><span class="o">,</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">GBP</span><span class="o">,</span> <span class="nc">USD</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mf">1.611</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">val</span> <span class="n">converter</span> <span class="k">=</span> <span class="nc">Converter</span><span class="o">(</span><span class="n">conversion</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">sumAndConversion1</span> <span class="k">=</span> <span class="mf">100.001</span><span class="o">(</span><span class="nc">USD</span><span class="o">)</span> <span class="o">+</span> <span class="mi">200</span><span class="o">(</span><span class="nc">EUR</span><span class="o">)</span> <span class="n">to</span> <span class="nc">GBP</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;sumAndConversion1: $sumAndConversion1&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">sumAndConversion2</span><span class="k">:</span> <span class="kt">Money</span> <span class="o">=</span> <span class="mi">100</span><span class="o">(</span><span class="nc">USD</span><span class="o">)</span> <span class="o">+</span> <span class="mf">210.4</span><span class="o">(</span><span class="nc">EUR</span><span class="o">)</span> <span class="n">to</span> <span class="nc">EUR</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;sumAndConversion2: $sumAndConversion2&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">sum</span> <span class="k">=</span> <span class="mf">100.001</span><span class="o">(</span><span class="nc">USD</span><span class="o">)</span> <span class="o">+</span> <span class="mi">200</span><span class="o">(</span><span class="nc">EUR</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">simpleConversion</span> <span class="k">=</span> <span class="n">sum</span><span class="o">(</span><span class="nc">GBP</span><span class="o">)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;simpleConversion: $simpleConversion&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">sumWithSimpleNumber</span> <span class="k">=</span> <span class="mi">100</span><span class="o">(</span><span class="nc">USD</span><span class="o">)</span> <span class="o">+</span> <span class="mf">23.560</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;sumWithSimpleNumber: $sumWithSimpleNumber&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">multiplicationWithSimpleNumber</span> <span class="k">=</span> <span class="mi">100</span><span class="o">(</span><span class="nc">USD</span><span class="o">)</span> <span class="o">*</span> <span class="mi">23</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;multiplicationWithSimpleNumber: $multiplicationWithSimpleNumber&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">usd</span> <span class="k">=</span> <span class="nc">Currency</span><span class="o">(</span><span class="s">&quot;USD&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">multiplication</span> <span class="k">=</span> <span class="mi">100</span><span class="o">(</span><span class="n">usd</span><span class="o">)</span> <span class="o">*</span> <span class="mi">23</span><span class="o">(</span><span class="nc">EUR</span><span class="o">)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;multiplication: $multiplication&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">divisionWithSimpleNumber</span> <span class="k">=</span> <span class="mi">100</span><span class="o">(</span><span class="nc">USD</span><span class="o">)</span> <span class="o">/</span> <span class="mi">23</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;divisionWithSimpleNumber: $divisionWithSimpleNumber&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">comparison</span> <span class="k">=</span> <span class="mi">100</span><span class="o">(</span><span class="nc">USD</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="o">(</span><span class="nc">EUR</span><span class="o">)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;100 USD &gt; 90 EUR? $comparison&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the client code just needs two simple imports and an implicit value of type <code>Converter</code>
in order to use the DSL. The operations shown in the previous code are only a few among the available ones.
Have a look at the <code>Money</code> class for a complete coverage.</p>

<p>You can find the source code here: <a href="https://github.com/lambdista/money">Scala DSL for money-related operations</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Try-Success-Failure API for Java 8]]></title>
    <link href="http://www.alessandrolacava.com/blog/try-success-failure-api-for-java/"/>
    <updated>2014-06-20T16:03:33+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/try-success-failure-api-for-java</id>
    <content type="html"><![CDATA[<h3>Try-Success-Failure API: Java implementation of the famous Scala counterpart</h3>

<p>Source code: <a href="https://github.com/lambdista/try">Try-Success-Failure API for Java</a></p>

<p>This API is a Java implementation of <a href="http://www.scala-lang.org/api/current/#scala.util.Try">Scala Try API</a>,
originally implemented by the guys at <a href="https://twitter.com/">Twitter</a> and later added to the Scala Standard Library.</p>

<p>The <code>Try</code> type represents a computation that may fail. If the computation is successful returns
the value wrapped in a <code>Try.Success</code> otherwise returns the
<code>java.lang.Exception</code> wrapped in a <code>Try.Failure</code>.</p>

<p>To use <code>Try</code> you need to call the <code>Try.apply(FailableSupplier)</code> method passing in a lambda with
the same signature used for a common <code>java.util.function.Supplier</code>.
Indeed <code>FailableSupplier</code> is just a <code>java.util.function.Supplier</code> with a
<code>throws Exception</code> added to its <code>get</code> method.</p>

<p>For example, <code>Try</code> can be used to perform division on a user-defined input, without the need to do explicit
exception-handling in all of the places that an exception might occur.</p>

<p>An important property of <code>Try</code> shown in the <code>divide</code> method of the <code>MainExample</code> class is its ability
to <em>pipeline (chain if you prefer)</em>  operations, catching exceptions along the way thanks to its <code>flatMap</code> method.
If you are not a seasoned functional programming geek concepts such as <code>flatMap/map</code> might not be easy to grasp
at first. However you&rsquo;ll get used to them and, in the end, you&rsquo;ll love them. Moreover you&rsquo;re going to encounter
these methods more and more often since some important Java 8 classes already implement them
(e.g. <code>java.util.Optional</code> and <code>java.util.stream.Stream</code>. Anyway for the moment just take for
granted that to pipeline more than two operations, say N, you just need to chain them by using N - 1
<code>flatMap</code> calls and a last call to <code>map</code>. E.g.: Suppose you have 3 variables (x, y and z) being
of type <code>Try</code> and you just want to sum them up. The code you need for doing that is the
following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">x</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">y</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">z</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">c</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Apart from <code>map</code> and <code>flatMap</code>, <code>Try</code> has many other useful methods. See the <code>TryTest</code>
class for a thorough coverage of all methods.</p>

<h3>Usage example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Integer division&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Enter the dividend press Return and then enter the divisor: &quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Scanner</span> <span class="n">dividend</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'><span class="n">Scanner</span> <span class="n">divisor</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Try</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">num</span> <span class="o">=</span> <span class="n">Try</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="nl">dividend:</span><span class="o">:</span><span class="n">nextInt</span><span class="o">);</span>
</span><span class='line'><span class="n">Try</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">denom</span> <span class="o">=</span> <span class="n">Try</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="nl">divisor:</span><span class="o">:</span><span class="n">nextInt</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Try</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">num</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">denom</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">y</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span><span class="o">));</span>
</span><span class='line'><span class="n">Try</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">resultTryStr</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="s">&quot;The result of division is: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">resultStr</span> <span class="o">=</span> <span class="n">resultTryStr</span><span class="o">.</span><span class="na">getOrElse</span><span class="o">(</span><span class="s">&quot;You must&#39;ve divided by zero or entered something that&#39;s not an Int. Try again!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">resultStr</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the previous example if you enter two valid integers with the second one&ndash;the divisor&ndash;being different from zero
then the code prints out <code>The result of division is: $RESULT</code>, where <code>$RESULT</code> is the division between the first
and the second number. On the other hand, if you either enter non valid integers&ndash;such as a string&ndash;or the second
number is zero then you&rsquo;ll get the message <code>You must've divided by zero or entered something that's not an Int. Try again!</code>
printed out.</p>

<p>Anyway, as I already said, see the <code>TryTest</code> class for a thorough coverage of all methods.</p>

<h3>Final Notes</h3>

<p>Any criticism/suggestion is more than welcome!</p>

<p>Source code: <a href="https://github.com/lambdista/try">Try-Success-Failure API for Java</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combine JavaScript and a Template Engine for Flexible Web Apps]]></title>
    <link href="http://www.alessandrolacava.com/blog/combine-javascript-and-a-template-engine-for-flexible-web-apps/"/>
    <updated>2011-10-26T17:34:17+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/combine-javascript-and-a-template-engine-for-flexible-web-apps</id>
    <content type="html"><![CDATA[<h3>Combine the power and simplicity of the TrimPath template engine with JavaScript and Ajax to develop next-generation web applications.</h3>

<p>Template engines (TEs) can be very useful in web development scenarios where you need to generate and format text automatically according to specific processing rules. These engines can also help you build your applications based on the Model-View-Controller (MVC) pattern, making them more robust and maintainable than applications based on spaghetti code. Most programming languages provide built-in or third-party TEs. Java, for example, has Velocity and FreeMarker, among others. For PHP, Smarty is the most used TE.</p>

<p>Go to <a href="http://www.developer.com/open/article.php/3864011/Combine-JavaScript-and-a-Template-Engine-for-Flexible-Web-Apps.htm">developer.com</a> to read the rest of the article: <strong>Combine JavaScript and a Template Engine for Flexible Web Apps</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Script.aculo.us Controls: Do Your Web Users a Favor]]></title>
    <link href="http://www.alessandrolacava.com/blog/script-aculo-us-controls-do-your-web-users-a-favor/"/>
    <updated>2011-10-26T17:32:32+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/script-aculo-us-controls-do-your-web-users-a-favor</id>
    <content type="html"><![CDATA[<h3>Learn how to integrate Script.aculo.us web controls into your web applications to make the end-user experience more pleasant.</h3>

<p>In a previous DevX article, I wrote about the JavaScript framework Prototype, which aims to ease the development of dynamic web applications. That article ended with just a few words about Script.aculo.us, which is a fantastic UI library based on Prototype. This article gives Script.aculo.us its due by examining the web controls it provides: autocompleters, sliders, and in-place editors.</p>

<p>Script.aculo.us is a pretty big library, so no single article can cover it completely. However, the knowledge you will gain will enable you to leverage the power of Script.aculo.us web controls to improve the end-user experience.</p>

<p>Go to <a href="http://www.devx.com/webdev/Article/37574">DevX</a> to read the rest of the article: <strong>Script.aculo.us Controls: Do Your Web Users a Favor</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Will Your Next Web Application Be a Google Gadget?]]></title>
    <link href="http://www.alessandrolacava.com/blog/will-your-next-web-application-be-a-google-gadget/"/>
    <updated>2011-10-26T17:31:04+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/will-your-next-web-application-be-a-google-gadget</id>
    <content type="html"><![CDATA[<h3>Learn how to leverage the Google Gadget API to make your web applications more reachable. As an example, you&rsquo;ll see how to build a real-world gadget that fetches and displays the DevX feeds.</h3>

<p>Since AJAX first appeared, developer interest in JavaScript has increased exponentially—and toolsets for building functionality in JavaScript have burgeoned as well. One of the latest tools for JavaScript-related development is Google Gadgets. Many web sites already provide gadgets built with the Google tools, and you can, too. This article shows you how to develop a Google Gadget that fetches DevX RSS feeds and displays them to the user.</p>

<p>Go to <a href="http://www.devx.com/webdev/Article/35007">DevX</a> to read the rest of the article: <strong>Will Your Next Web Application Be a Google Gadget?</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Productivity Perks Behind Prototype's Popularity]]></title>
    <link href="http://www.alessandrolacava.com/blog/the-productivity-perks-behind-prototypes-popularity-2/"/>
    <updated>2011-10-26T17:29:31+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/the-productivity-perks-behind-prototypes-popularity-2</id>
    <content type="html"><![CDATA[<h3>Learn how to leverage the popular Prototype JavaScript framework to speed up your AJAX-based development. You&rsquo;ll see how to use JavaScript in an object-oriented way.</h3>

<p>The Prototype home page claims that &ldquo;Prototype is a JavaScript framework that aims to ease the development of dynamic Web applications.&rdquo; By using many object-oriented paradigms such as class-driven development and inheritance to enable JavaScript application development, Prototype completely accomplishes its aim. In fact, this framework contains a lot of useful functionalities, which you cannot help but apply to every application you develop once you&rsquo;ve started using them.</p>

<p>Prototype&rsquo;s main claim to fame is its rich AJAX (Asynchronous JavaScript and XML) library, which simplifies the now popular Web development technique for making non-blocking calls to the server through JavaScript. (It topped the recent Ajaxian.com 2006 Survey as the most popular AJAX framework.) Of course, everything you can do with Prototype you also can do using plain JavaScript—upon which Prototype is built. But why would you want to complicate your life? For example, which would you rather type to accomplish the same task: document.getElementById(&ldquo;myElement&rdquo;) or $(&ldquo;myElement&rdquo;)? If you answered $(&ldquo;myElement&rdquo;), then read the remainder of this article for an in-depth discussion of some useful Prototype functions—$ is just one.</p>

<p>Go to <a href="http://www.devx.com/AJAXRoundup/Article/33174">DevX</a> to read the rest of the article: <strong>The Productivity Perks Behind Prototype&rsquo;s Popularity</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed Up Your AJAX-based Apps With JSON]]></title>
    <link href="http://www.alessandrolacava.com/blog/speed-up-your-ajax-based-apps-with-json/"/>
    <updated>2011-10-26T16:54:43+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/speed-up-your-ajax-based-apps-with-json</id>
    <content type="html"><![CDATA[<h3>Find out how to improve your Web application performance by leveraging AJAX and JSON. In particular, you&rsquo;ll see the advantages of using JSON over XML as a lightweight JavaScript data-interchange format.</h3>

<p>JSON stands for JavaScript Object Notation and is a lightweight data-interchange format. Because it is text-based it is easy for humans to read and write, and it has a regular syntax that&rsquo;s easy to parse programmatically. JSON is basically a subset of JavaScript and, as you&rsquo;ll see, is even easier to parse than XML.</p>

<p>Go to <a href="http://www.devx.com/webdev/Article/32651">DevX</a> to read the rest of the article: <strong>Speed Up Your AJAX-based Apps with JSON</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Brilliant Client/Server Apps With J2ME, PHP, and MySQL]]></title>
    <link href="http://www.alessandrolacava.com/blog/build-brilliant-clientserver-apps-with-j2me-php-and-mysql/"/>
    <updated>2011-10-26T16:53:41+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/build-brilliant-clientserver-apps-with-j2me-php-and-mysql</id>
    <content type="html"><![CDATA[<h3>In this article you&rsquo;ll see how to make the three technologies work together by developing a simple and useful application that lets you update a multi-user blog and download the latest posts from it.</h3>

<p>Write once, run anywhere. This Java motto seems to hold true even for mobile devices. Indeed, since it was born J2ME has had an ever-increasing impact on mobile development. Some may argue that J2ME is not as portable as other Java technologies, but even so, the result obtained on different mobile devices is, in most cases, still acceptable.</p>

<p>Go to <a href="http://www.devx.com/Java/Article/32069">DevX</a> to read the rest of the article: <strong>Build Brilliant Client/Server Apps with J2ME, PHP, and MySQL</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Producing Professional MSDN-style Documentation With .NET and NDoc]]></title>
    <link href="http://www.alessandrolacava.com/blog/producing-professional-msdn-style-documentation-with-net-and-ndoc/"/>
    <updated>2011-10-26T16:52:33+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/producing-professional-msdn-style-documentation-with-net-and-ndoc</id>
    <content type="html"><![CDATA[<h3>Tired of trying to keep your documentation synchronized with the source? You can help alleviate the problem by creating professional documentation directly from the built-in XML documentation features of the C# language using the brilliant NDoc open-source application.</h3>

<p>The .NET framework provides a nice way to insert XML documentation tags inside C# source code. These tags can then be extracted to an XML file, and using NDoc, transformed into fully-functional MSDN-style documentation.</p>

<p>Go to <a href="http://www.devx.com/dotnet/Article/29646">DevX</a> to read the rest of the article: <strong>Producing Professional MSDN-style Documentation with .NET and NDoc</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Obtaining Wireless News With J2ME and PHP]]></title>
    <link href="http://www.alessandrolacava.com/blog/obtaining-wireless-news-with-j2me-and-php/"/>
    <updated>2011-10-26T16:49:06+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/obtaining-wireless-news-with-j2me-and-php</id>
    <content type="html"><![CDATA[<h3>J2ME and PHP are both powerful technologies used to develop applications for mobile devices and Web applications, respectively. In this article, you&rsquo;ll see how to make them work together by developing a simple and useful application that retrieves the latest news from the Web and displays that on a mobile device.</h3>

<p>The Java 2 Platform, Micro Edition (J2ME) is targeted at cell phones, smart cards, pagers, and other consumer devices. J2ME technology consists of a virtual machine and a set of APIs suitable for tailored runtime environments for these devices. PHP, on the other hand, is a widely used server-based language to build Web applications. But these two radically different technologies work very well together. In this article you&rsquo;ll see how they can interact via HTTP (Hyper Text Transfer Protocol). Of course, this is not intended to be a thorough explanation of how HTTP works—you only need to know that HTTP is a request/response protocol. That simply means that the client application performs a request and the server application returns a response.</p>

<p>Go to <a href="http://www.devx.com/wireless/Article/28404">DevX</a> to read the rest of the article: <strong>Obtaining Wireless News with J2ME and PHP</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Secrets Secret: Steganography With .NET]]></title>
    <link href="http://www.alessandrolacava.com/blog/keeping-secrets-secret-steganography-with-net/"/>
    <updated>2011-10-26T16:47:19+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/keeping-secrets-secret-steganography-with-net</id>
    <content type="html"><![CDATA[<h3>Steganography is a way to protect information by hiding it &ldquo;in plain sight&rdquo; within other types of digital content. Steganography complements rather than replaces encryption by adding another layer of security—it&rsquo;s much more difficult to decrypt a message if you don&rsquo;t know that there is a message. See how to leverage .NET to create steganographic techniques that hide encrypted information inside common digital data files.</h3>

<p>Steganography, literally &ldquo;hidden writing,&rdquo; is nowadays most often associated with embedding data in some form of electronic media. Data is hidden by adding or altering insignificant bits of information of a file. For example, an algorithm designed to embed a text message might slightly alter information describing the RGB composition of a pixel for an image file.</p>

<p>Go to <a href="http://www.devx.com/dotnet/Article/22667">DevX</a> to read the rest of the article: <strong>Keeping Secrets Secret: Steganography with .NET</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodbye Dennis Ritchie (Dmr)]]></title>
    <link href="http://www.alessandrolacava.com/blog/goodbye-dennis-macalistair-ritchie-dmr/"/>
    <updated>2011-10-13T14:56:36+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/goodbye-dennis-macalistair-ritchie-dmr</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://www.alessandrolacava.com/images/dennis-ritchie.jpg" title="Dennis MacAlistair Ritchie (dmr)" >
<a href="http://en.wikipedia.org/wiki/Dennis_Ritchie">Dennis MacAlistair Ritchie (username: dmr, September 9, 1941 — October 8, 2011)</a>
This post is dedicated to a man that gave a lot to the computer science world, Dennis Ritchie (a.k.a. dmr). He is the creator of the C programming language     and the key developer of the Unix operating system.</p>

<p><a href="http://en.wikipedia.org/wiki/The_C_Programming_Language_%28book%29">The C programming language</a> is the book he wrote along with <a href="http://en.wikipedia.org/wiki/Brian_Kernighan">Brian Kernighan</a>.   In my humble opinion, it is one of the best book ever written about computer programming.</p>

<p>Without further ado, I just want to say goodbye to one of the people I respect most when it comes to computer science. I have to thank Mr. Ritchie if I can read declarations such as (The C programming Language, chapter 5):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">x</span><span class="p">())[])()</span>
</span></code></pre></td></tr></table></div></figure>


<p>x is a function returning a pointer to an array of pointers to functions returning char. :-)
I think he would have said goodbye this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;goodbye, world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>R.I.P. Dennis Ritchie.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undo Close Tab In Eclipse]]></title>
    <link href="http://www.alessandrolacava.com/blog/undo-close-tab-in-eclipse/"/>
    <updated>2009-03-26T10:33:59+01:00</updated>
    <id>http://www.alessandrolacava.com/blog/undo-close-tab-in-eclipse</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t know about you, but I love the Firefox&rsquo;s <strong>undo-close-tab</strong> feature (Ctrl+Shift+T). If you use <strong>Eclipse</strong> you might be glad to know you can undo the close-tab action in Eclipse as well. You can do that both using your mouse by clicking on the yellow left arrow you can see in the Eclipse toolbar and through the keybord using the Alt+Left Arrow key combination.</p>

<p>I hope this helps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Not Found | EasyPHP | MySQL | phpMyAdmin]]></title>
    <link href="http://www.alessandrolacava.com/blog/object-not-found-easyphp-mysql-phpmyadmin/"/>
    <updated>2009-01-30T10:46:05+01:00</updated>
    <id>http://www.alessandrolacava.com/blog/object-not-found-easyphp-mysql-phpmyadmin</id>
    <content type="html"><![CDATA[<p>After installing EasyPHP, when you try to run phpMyAdmin you might get the following error:</p>

<p><strong>Object not found!</strong></p>

<p><strong>The requested URL was not found on this server. If you entered the URL manually please check your spelling and try again.</strong></p>

<p>This might be due to the fact that it tries the following URL:</p>

<p><strong><code>http://127.0.0.1/mysql/</code></strong></p>

<p>Try this one instead:</p>

<p><strong><code>http://127.0.0.1/home/mysql/</code></strong></p>

<p>If it works then you can work it out by adding the following line to the httpd.conf file of Apache (you can find it under the %EASYPHP_HOME%/apache/conf path, where %EASYPHP_HOME% is the home directory of your EasyPHP installation). Open the file with a text editor and look up the following string: <strong>Alias /home/mysql</strong></p>

<p>You should find something similar to the following line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='apacheconf'><span class='line'><span class="nb">Alias</span> <span class="sx">/home/mysql</span> <span class="s2">&quot;C:/Program Files/EasyPHP 3.0/phpmyadmin&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just add, to the next line, the following string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='apacheconf'><span class='line'><span class="nb">Alias</span> <span class="sx">/mysql</span> <span class="s2">&quot;C:/Program Files/EasyPHP 3.0/phpmyadmin&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restart EasyPHP. Now try to open <a href="http://127.0.0.1/mysql/.">http://127.0.0.1/mysql/.</a> It should work.</p>
]]></content>
  </entry>
  
</feed>
