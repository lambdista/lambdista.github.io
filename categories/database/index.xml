<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on Alessandro Lacava</title>
    <link>http://www.alessandrolacava.com/categories/database/</link>
    <description>Recent content in Database on Alessandro Lacava</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jun 2008 13:33:24 +0000</lastBuildDate>
    
	<atom:link href="http://www.alessandrolacava.com/categories/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Performance differences between IN and EXISTS</title>
      <link>http://www.alessandrolacava.com/posts/performance-differences-between-in-and-exists/</link>
      <pubDate>Wed, 04 Jun 2008 13:33:24 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/posts/performance-differences-between-in-and-exists/</guid>
      <description>Very often I hear people wondering if it&amp;rsquo;s better the EXISTS or the IN operator. Let&amp;rsquo;s start by saying that the two operators behave differently when NULL values are involved (see this post).
If you are sure that the field used to join the tables does not include NULL values then the IN operator &amp;ldquo;generally&amp;rdquo; performs better than EXISTS. I say &amp;ldquo;generally&amp;rdquo; because this is not always the case. For example consider the following query:</description>
    </item>
    
    <item>
      <title>NOT IN vs. NOT EXISTS when NULL values are involved</title>
      <link>http://www.alessandrolacava.com/posts/not-in-vs-not-exists-when-null-values-are-involved/</link>
      <pubDate>Wed, 04 Jun 2008 13:24:09 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/posts/not-in-vs-not-exists-when-null-values-are-involved/</guid>
      <description>NOT IN does not behave as you would expect when NULL values are involved. Suppose you have the following tables:
 CD_FIELD DS_FIELD  1 ALPHA   2 BETA   TABLE_A
 CD_FIELD DS_FIELD  1 GAMMA   NULL DELTA   TABLE_B
Now try the following query:
SELECT*FROMtable_aaWHEREa.cd_fieldNOTIN(SELECTb.cd_fieldFROMtable_bb);  Does the previous query return any row? The answer is NO it doesn&amp;rsquo;t, even if there is a value (2) in table_a.</description>
    </item>
    
    <item>
      <title>How to get the number of columns in a ResultSet in Java</title>
      <link>http://www.alessandrolacava.com/posts/how-to-get-the-number-of-columns-in-a-resultset-in-java/</link>
      <pubDate>Wed, 12 Dec 2007 10:32:31 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/posts/how-to-get-the-number-of-columns-in-a-resultset-in-java/</guid>
      <description>In Java it is possible to retrieve the number of columns of a ResultSet dinamically, thanks to the ResultSetMetaData class. Here&amp;rsquo;s an example:
// Here you get the conn object. E.g.: // Connection conn = DriverManager.getConnection(...); Statementst=conn.createStatement();ResultSetrs=st.executeQuery(&amp;#34;SELECT * FROM your_table&amp;#34;);ResultSetMetaDatarsmd=rs.getMetaData();intnumCols=rsmd.getColumnCount();System.out.println(&amp;#34;Number of columns in your_table: &amp;#34;+numCols);  The previous code retrieves and displays the number of columns of your_table.</description>
    </item>
    
  </channel>
</rss>