<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oracle on Alessandro Lacava</title>
    <link>/categories/oracle/</link>
    <description>Recent content in Oracle on Alessandro Lacava</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jun 2008 13:33:24 +0000</lastBuildDate>
    <atom:link href="/categories/oracle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Performance differences between IN and EXISTS</title>
      <link>/blog/performance-differences-between-in-and-exists/</link>
      <pubDate>Wed, 04 Jun 2008 13:33:24 +0000</pubDate>
      <guid>/blog/performance-differences-between-in-and-exists/</guid>
      <description>&lt;p&gt;Very often I hear people wondering if it&amp;rsquo;s better the &lt;code&gt;EXISTS&lt;/code&gt; or the &lt;code&gt;IN&lt;/code&gt; operator.&#xA;Let&amp;rsquo;s start by saying that the two operators behave differently when &lt;code&gt;NULL&lt;/code&gt; values are involved&#xA;(see &lt;a href=&#34;/blog/2008/06/04/not-in-vs-not-exists-when-null-values-are-involved&#34;&gt;this post&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;If you are sure that the field used to join the tables does not include &lt;code&gt;NULL&lt;/code&gt; values then the &lt;code&gt;IN&lt;/code&gt; operator &amp;ldquo;generally&amp;rdquo;&#xA;performs better than &lt;code&gt;EXISTS&lt;/code&gt;. I say &amp;ldquo;generally&amp;rdquo; because this is not always the case. For example consider the following query:&lt;/p&gt;</description>
    </item>
    <item>
      <title>NOT IN vs. NOT EXISTS when NULL values are involved</title>
      <link>/blog/not-in-vs-not-exists-when-null-values-are-involved/</link>
      <pubDate>Wed, 04 Jun 2008 13:24:09 +0000</pubDate>
      <guid>/blog/not-in-vs-not-exists-when-null-values-are-involved/</guid>
      <description>&lt;p&gt;&lt;code&gt;NOT IN&lt;/code&gt; does not behave as you would expect when &lt;code&gt;NULL&lt;/code&gt; values are involved.&#xA;Suppose you have the following tables:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;tr &gt;&#xA;    &lt;td style=&#34;color: #696969&#34;&gt;CD_FIELD&lt;/td&gt;&#xA;    &lt;td style=&#34;color: #696969&#34;&gt;DS_FIELD&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr &gt;&#xA;    &lt;td&gt;1&lt;/td&gt;&#xA;    &lt;td&gt;ALPHA&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;    &lt;td&gt;2&lt;/td&gt;&#xA;    &lt;td&gt;BETA&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;**TABLE_A**&#xA;&lt;table&gt;&#xA;  &lt;tr &gt;&#xA;    &lt;td style=&#34;color: #696969&#34;&gt;CD_FIELD&lt;/td&gt;&#xA;    &lt;td style=&#34;color: #696969&#34;&gt;DS_FIELD&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr &gt;&#xA;    &lt;td&gt;1&lt;/td&gt;&#xA;    &lt;td&gt;GAMMA&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;    &lt;td&gt;NULL&lt;/td&gt;&#xA;    &lt;td&gt;DELTA&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;**TABLE_B**&#xA;&lt;p&gt;Now try the following query:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; table_a a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; a.cd_field &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; b.cd_field &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; table_b b);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;Does the previous query return any row? The answer is NO it doesn&amp;rsquo;t, even if there is a value (2) in table_a.cd_field&#xA;which is not present in table_b.cd_field.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to compute a timestamp in Oracle (PL SQL)</title>
      <link>/blog/how-to-compute-a-timestamp-in-oracle-pl-sql/</link>
      <pubDate>Tue, 09 Oct 2007 09:41:18 +0000</pubDate>
      <guid>/blog/how-to-compute-a-timestamp-in-oracle-pl-sql/</guid>
      <description>&lt;p&gt;Many sources use the term timestamp to refer specifically to Unix time, the number of seconds since 00:00:00 UTC on&#xA;January 1, 1970. In Oracle you can compute this number very easily. For example, the following query computes the&#xA;number of seconds between 00:00:00 UTC on January 1, 1970 and October 9, 2007.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; (to_date(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;09-10-2007&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DD-MM-YYYY&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to_date(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;01-01-1970&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DD-MM-YYYY&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dual&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;The result of the preceding query should be 1191888000.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to create a copy/backup of a table in Oracle</title>
      <link>/blog/how-to-create-a-copybackup-of-a-table-in-oracle/</link>
      <pubDate>Wed, 04 Jul 2007 08:16:50 +0000</pubDate>
      <guid>/blog/how-to-create-a-copybackup-of-a-table-in-oracle/</guid>
      <description>&lt;p&gt;You can create a backup of a table (structure and data) in Oracle by using the following syntax:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; customers_backup &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; customers)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;The previous example creates the &lt;code&gt;customers_backup&lt;/code&gt; table which mirrors the structure and data of the &lt;code&gt;customers&lt;/code&gt; table.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to commit a single DML statement in Oracle (PL/SQL)</title>
      <link>/blog/how-to-commit-a-single-dml-statement-in-oracle-plsql/</link>
      <pubDate>Thu, 24 May 2007 12:52:20 +0000</pubDate>
      <guid>/blog/how-to-commit-a-single-dml-statement-in-oracle-plsql/</guid>
      <description>&lt;p&gt;Sometimes you might need to commit a single &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; statement and not the whole main transaction.&#xA;In such a case you can use an &lt;code&gt;AUTONOMOUS TRANSACTION&lt;/code&gt; which is a feature available since Oracle 8i.&#xA;The trick is to encapsulate the statement in a procedure and use the pragma &lt;code&gt;AUTONOMOUS_TRANSACTION&lt;/code&gt;. Here is an example, suppose you have a table, &lt;code&gt;your_table&lt;/code&gt;, which has just one column of type &lt;code&gt;NUMBER&lt;/code&gt; and you want to insert the value 1, irrespective of the state of the main transaction:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to put a set of rows into a single row in Oracle</title>
      <link>/blog/how-to-put-a-set-of-rows-into-a-single-row-in-oracle/</link>
      <pubDate>Fri, 27 Apr 2007 14:11:27 +0000</pubDate>
      <guid>/blog/how-to-put-a-set-of-rows-into-a-single-row-in-oracle/</guid>
      <description>&lt;p&gt;In Oracle you can execute hierarchical queries using some cool operators&amp;ndash;&lt;code&gt;CONNECT BY PRIOR&lt;/code&gt;, &lt;code&gt;START WITH&lt;/code&gt; and&#xA;the pseudocolumn &lt;code&gt;SYS_CONNECT_BY_PATH&lt;/code&gt;, namely. However, using your fantasy you can exploit these operators&#xA;to put in a single row&amp;ndash;with each item separated by the next through a separator, such as a comma&amp;ndash;what you have&#xA;in multiple rows. For example if you have more than one telephone number in different rows and you want to put them&#xA;in a single comma-separated row you could use a query similar to the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to tell Oracle to use more than one byte per character</title>
      <link>/blog/how-to-tell-oracle-to-use-more-than-one-byte-per-character/</link>
      <pubDate>Thu, 26 Apr 2007 14:05:31 +0000</pubDate>
      <guid>/blog/how-to-tell-oracle-to-use-more-than-one-byte-per-character/</guid>
      <description>&lt;p&gt;When you create a table, by default, the number of bytes used to represent a character in a &lt;code&gt;VARCHAR2&lt;/code&gt; type is 1,&#xA;irrespective of the characterset of the DB. This may be fine if the characterset is such that it uses just one byte per&#xA;character. However, if the characterset of the DB is such that there might take more than one byte to represent a&#xA;character (for example for characterset = &lt;code&gt;AL32UTF8&lt;/code&gt;) you might run into troubles, such as the error:&#xA;&lt;strong&gt;ORA-01401: inserted value too large for column&lt;/strong&gt;. However you can specify, at creation time, that the size of&#xA;characters is expressed in CHARs instead of bytes. For example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using dynamic SQL statements from PL/SQL</title>
      <link>/blog/using-dynamic-sql-statements-from-plsql/</link>
      <pubDate>Wed, 06 Sep 2006 10:24:18 +0000</pubDate>
      <guid>/blog/using-dynamic-sql-statements-from-plsql/</guid>
      <description>&lt;p&gt;Sometimes you need to execute dynamic SQL statements. Starting from Oracle8i you can accomplish this task using the&#xA;&lt;code&gt;EXECUTE IMMEDIATE&lt;/code&gt; statement. Here are three examples of how you can take advantage of this great statement.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sql_select :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SELECT * FROM your_table WHERE field1 = :1&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;EXECUTE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IMMEDIATE&lt;/span&gt; sql_select&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; your_cursor&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;USING&lt;/span&gt; your_parameter_for_field1;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;In this first example I showed how you can use &lt;code&gt;EXECUTE IMMEDIATE&lt;/code&gt; to execute the query and put the result into a cursor.&#xA;The &lt;code&gt;USING your_parameter_for_field1&lt;/code&gt; part replaces the &lt;code&gt;:1&lt;/code&gt; bind variable with the value contained in the&#xA;&lt;code&gt;your_parameter_for_field1&lt;/code&gt; parameter.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to store and extract XML data in and from an Oracle DataBase (DB)</title>
      <link>/blog/how-to-store-and-extract-xml-data-in-and-from-an-oracle-database-db/</link>
      <pubDate>Thu, 08 Jun 2006 15:05:27 +0000</pubDate>
      <guid>/blog/how-to-store-and-extract-xml-data-in-and-from-an-oracle-database-db/</guid>
      <description>&lt;p&gt;Here are some snippets of code showing how to accomplish this:&lt;/p&gt;&#xA;&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; SampleTable (id number &lt;span style=&#34;color:#66d9ef&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;, person XMLType)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;This first example creates a table with only two columns: id and person. The first is the PK of the table and the second&#xA;is of XMLType type. The latter is going to contain our XML data.&lt;/p&gt;&#xA;&lt;p&gt;Now let&amp;rsquo;s insert one row in the table.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; SampleTable &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, XMLType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;XMLString&amp;#39;&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;Where you must replace &lt;code&gt;XMLString&lt;/code&gt; with any string representing XML. For example, you can replace it with:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
