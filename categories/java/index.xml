<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Alessandro Lacava</title>
    <link>/categories/java/</link>
    <description>Recent content in Java on Alessandro Lacava</description>
    <generator>Hugo</generator>
    <language>en-us</language>
<<<<<<< HEAD
    <lastBuildDate>Wed, 03 Dec 2008 10:47:02 +0000</lastBuildDate>
    <atom:link href="/categories/java/index.xml" rel="self" type="application/rss+xml" />
=======
    <lastBuildDate>Wed, 03 Dec 2008 10:47:02 +0000</lastBuildDate><atom:link href="/categories/java/index.xml" rel="self" type="application/rss+xml" />
>>>>>>> origin/master
    <item>
      <title>Java split() of String | Multiple whitespace characters</title>
      <link>/blog/java-split-of-string-multiple-whitespace-characters/</link>
      <pubDate>Wed, 03 Dec 2008 10:47:02 +0000</pubDate>
      <guid>/blog/java-split-of-string-multiple-whitespace-characters/</guid>
      <description>&lt;p&gt;The &lt;code&gt;split&lt;/code&gt; method of the &lt;code&gt;String&lt;/code&gt; class is very useful when you want to tokenize a string. Its power lies&#xA;in the fact that it accepts a string, as a parameter, which can be a regular expression. However you must&#xA;be careful when you want to split a string using the whitespace character as a delimiter. Consider the&#xA;following snippet of code:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Testing split using twoÂ  whitespace characters&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; tokens &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\s&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(String token : tokens) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; token &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;What&amp;rsquo;s the output produced by the previous code? If you think it is the following one you&amp;rsquo;re wrong:&lt;/p&gt;</description>
    </item>
    <item>
      <title>OutOfMemoryError in Eclipse | Java Virtual Machine (JVM)</title>
      <link>/blog/outofmemoryerror-in-eclipse-java-virtual-machine-jvm/</link>
      <pubDate>Tue, 22 Jul 2008 08:53:07 +0000</pubDate>
      <guid>/blog/outofmemoryerror-in-eclipse-java-virtual-machine-jvm/</guid>
<<<<<<< HEAD
      <description>&lt;h1 id=&#34;outofmemoryerror-in-eclipse--java-virtual-machine-jvm&#34;&gt;OutOfMemoryError in Eclipse | Java Virtual Machine (JVM)&lt;/h1&gt;&#xA;&lt;p&gt;It might happen that while running a Java application within the Eclipse environment you get an OutOfMemoryError due to the maximum amount of memory dedicated to the heap. You can fix it by increasing the minimum (-Xms parameter) and maximum (-Xmx parameter) heap size. You can do it in two different ways:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;By editing your &lt;strong&gt;eclipse.ini&lt;/strong&gt; file you find under your Eclipse installation directory. Within that file you should find two lines similar to the following ones:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;-Xms40m&lt;/strong&gt;&#xA;** -Xmx512m**&lt;/p&gt;</description>
=======
      <description>OutOfMemoryError in Eclipse | Java Virtual Machine (JVM) It might happen that while running a Java application within the Eclipse environment you get an OutOfMemoryError due to the maximum amount of memory dedicated to the heap. You can fix it by increasing the minimum (-Xms parameter) and maximum (-Xmx parameter) heap size. You can do it in two different ways:
By editing your eclipse.ini file you find under your Eclipse installation directory.</description>
>>>>>>> origin/master
    </item>
    <item>
      <title>How to get the number of columns in a ResultSet in Java</title>
      <link>/blog/how-to-get-the-number-of-columns-in-a-resultset-in-java/</link>
      <pubDate>Wed, 12 Dec 2007 10:32:31 +0000</pubDate>
      <guid>/blog/how-to-get-the-number-of-columns-in-a-resultset-in-java/</guid>
<<<<<<< HEAD
      <description>&lt;p&gt;In Java it is possible to retrieve the number of columns of a &lt;code&gt;ResultSet&lt;/code&gt; dinamically, thanks to the &lt;code&gt;ResultSetMetaData&lt;/code&gt;&#xA;class. Here&amp;rsquo;s an example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Here you get the conn object. E.g.:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Connection conn = DriverManager.getConnection(...);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Statement st &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; conn.&lt;span style=&#34;color:#a6e22e&#34;&gt;createStatement&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ResultSet rs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.&lt;span style=&#34;color:#a6e22e&#34;&gt;executeQuery&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM your_table&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ResultSetMetaData rsmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rs.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMetaData&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; numCols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsmd.&lt;span style=&#34;color:#a6e22e&#34;&gt;getColumnCount&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of columns in your_table: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; numCols);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;The previous code retrieves and displays the number of columns of &lt;code&gt;your_table&lt;/code&gt;.&lt;/p&gt;</description>
=======
      <description>In Java it is possible to retrieve the number of columns of a ResultSet dinamically, thanks to the ResultSetMetaData class. Here&amp;rsquo;s an example:
// Here you get the conn object. E.g.: // Connection conn = DriverManager.getConnection(...); Statement st = conn.createStatement(); ResultSet rs = st.executeQuery(&amp;#34;SELECT * FROM your_table&amp;#34;); ResultSetMetaData rsmd = rs.getMetaData(); int numCols = rsmd.getColumnCount(); System.out.println(&amp;#34;Number of columns in your_table: &amp;#34; + numCols); The previous code retrieves and displays the number of columns of your_table.</description>
>>>>>>> origin/master
    </item>
    <item>
      <title>Very Useful Shortcuts for Eclipse</title>
      <link>/blog/very-useful-shortcuts-for-eclipse/</link>
      <pubDate>Tue, 25 Sep 2007 11:10:01 +0000</pubDate>
      <guid>/blog/very-useful-shortcuts-for-eclipse/</guid>
<<<<<<< HEAD
      <description>&lt;p&gt;Who uses eclipse already knows how fantastic this great IDE is. Here I want to provide a table with the shortcuts I use almost ever when I develop in Java.&lt;/p&gt;&#xA;&lt;table cellpadding=&#34;3&#34; style=&#34;border: 1px solid #0066ff; font-family: arial&#34; cellspacing=&#34;0&#34; &gt;&#xA;&lt;p&gt;Action&#xA;Shortcut&lt;/p&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Toggle Comment&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+7&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Show Tooltip&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;F2&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Format Code&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Shift+F&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Indent Line&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+I&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Duplicate Lines Down&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Alt+Down Arrow&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Duplicate Lines Up&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Alt+Up Arrow&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Delete Next Line And Move Below Code Up&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+D&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Delete Next Word&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Delete&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Delete Previous Word&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Backspace&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Delete Line&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Shift+Delete&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Insert Line Above The Current One&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Shift+Enter&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Insert Line Below The Current One&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Shift+Enter&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Move Lines Down&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Alt+Down Arrow&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Move Lines Up&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Alt+Up Arrow&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Next Word&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Right Arrow&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Previous Word&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Left Arrow&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;To Upper Case&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Shift+X&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;To Lower Case&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Ctrl+Shift+Y&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr &gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Shortcut for System.out.println&#xA;&lt;/td&gt;&#xA;&lt;td style=&#34;border: 1px solid #0066ff&#34; &gt;Type syso and then Ctrl+Space Bar&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/table&gt;</description>
=======
      <description>Who uses eclipse already knows how fantastic this great IDE is. Here I want to provide a table with the shortcuts I use almost ever when I develop in Java.
Action Shortcut
Toggle Comment Ctrl+7 Show Tooltip F2 Format Code Ctrl+Shift+F Indent Line Ctrl+I Duplicate Lines Down Ctrl+Alt+Down Arrow Duplicate Lines Up Ctrl+Alt+Up Arrow Delete Next Line And Move Below Code Up Ctrl+D Delete Next Word Ctrl+Delete Delete Previous Word Ctrl+Backspace Delete Line Ctrl+Shift+Delete Insert Line Above The Current One Ctrl+Shift+Enter Insert Line Below The Current One Shift+Enter Move Lines Down Alt+Down Arrow Move Lines Up Alt+Up Arrow Next Word Ctrl+Right Arrow Previous Word Ctrl+Left Arrow To Upper Case Ctrl+Shift+X To Lower Case Ctrl+Shift+Y Shortcut for System.</description>
>>>>>>> origin/master
    </item>
    <item>
      <title>How to attach source or Javadoc to Java Enterprise Edition API in Eclipse</title>
      <link>/blog/how-to-attach-source-or-javadoc-to-servlets-in-eclipse/</link>
      <pubDate>Fri, 14 Sep 2007 12:50:48 +0000</pubDate>
      <guid>/blog/how-to-attach-source-or-javadoc-to-servlets-in-eclipse/</guid>
      <description>&lt;p&gt;Eclipse is a great IDE. When you hover your mouse over a class name or method of the Java SE API you get a contextual help for that class or method. However if you do the same thing over a Java EE class, such as &lt;code&gt;HttpServletRequest&lt;/code&gt; you might not get the same effect. This is because there&amp;rsquo;s is no source or Javadoc attached to that class. To attach the documentation to your J2EE class as well you can follow these steps:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to exclude subversion hidden directories (.svn) using Ant</title>
      <link>/blog/how-to-exclude-subversion-hidden-directories-svn-using-ant/</link>
      <pubDate>Mon, 04 Jun 2007 10:43:49 +0000</pubDate>
      <guid>/blog/how-to-exclude-subversion-hidden-directories-svn-using-ant/</guid>
      <description>&lt;p&gt;Many Java developers already know that &lt;a href=&#34;https://ant.apache.org/&#34;&gt;Ant&lt;/a&gt; is a great build tool. Besides a build tool you also need a good version control system to manage the various versions of your code. For this purpose I often use &lt;a href=&#34;https://subversion.tigris.org/&#34;&gt;Subversion&lt;/a&gt;. Now, there might be time when you need to exclude the Subversion hidden directories from, for example, a backup Ant target you built. To do that you just need to use the following attribute to your zipfileset or other directory-based task:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to select any character across multiple lines in Java</title>
      <link>/blog/how-to-select-any-character-across-multiple-lines-in-java/</link>
      <pubDate>Tue, 10 Oct 2006 08:52:06 +0000</pubDate>
      <guid>/blog/how-to-select-any-character-across-multiple-lines-in-java/</guid>
<<<<<<< HEAD
      <description>&lt;p&gt;You can do that using the following pattern in the &lt;code&gt;compile&lt;/code&gt; static method of the &lt;code&gt;java.util.regex.Pattern&lt;/code&gt; class.&#xA;The pattern is &lt;code&gt;(.|n|r)*?&lt;/code&gt; which means: any character (the .) or (the |) n or r. Zero or more times (the *)&#xA;of the whole stuff.&lt;/p&gt;&#xA;&lt;p&gt;Example: The following method strips the multiline comments (those between /* and */) from a string passed in and&#xA;returns the resulting string:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.regex;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ... other code &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Strip multiline comments&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deleteMultilineComments&lt;/span&gt;(String subject) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Pattern pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pattern.&lt;span style=&#34;color:#a6e22e&#34;&gt;compile&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(/\\*(.|n|r)*?\\*/)&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Matcher matcher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pattern.&lt;span style=&#34;color:#a6e22e&#34;&gt;matcher&lt;/span&gt;(subject);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; matcher.&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceAll&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;Note: rn works for Windows systems. n works for Unix-like systems. r works for Mac systems.&lt;/p&gt;</description>
=======
      <description>You can do that using the following pattern in the compile static method of the java.util.regex.Pattern class. The pattern is (.|n|r)*? which means: any character (the .) or (the |) n or r. Zero or more times (the *) of the whole stuff.
Example: The following method strips the multiline comments (those between /* and */) from a string passed in and returns the resulting string:
import java.util.regex; // ... other code // Strip multiline comments public void deleteMultilineComments(String subject) { Pattern pattern = Pattern.</description>
>>>>>>> origin/master
    </item>
    <item>
      <title>Java passes EVERYTHING by value!</title>
      <link>/blog/java-passes-everything-by-value/</link>
      <pubDate>Wed, 13 Sep 2006 08:51:47 +0000</pubDate>
      <guid>/blog/java-passes-everything-by-value/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a common misconception thinking (or worse teaching!) that, in Java, primitives are passed by value and objects&#xA;by reference. Actually, everything in Java is passed by value as well as object references.&lt;/p&gt;&#xA;&lt;p&gt;When a parameter is passed by value, an actual copy of it is really passed so that any change made will have only a&#xA;local effect. For example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  increment(a);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(a); &lt;span style=&#34;color:#75715e&#34;&gt;//it prints 0 so increment didn&amp;#39;t work as expected&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(a); &lt;span style=&#34;color:#75715e&#34;&gt;//it prints 1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;As you can see the change made to the parameter passed to &lt;code&gt;increment&lt;/code&gt;, that is &lt;code&gt;a&lt;/code&gt;, affects only the local copy of it.&#xA;This proves that Java passes primitives by value.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What happens if you write something like a = a&#43;&#43; in Java?</title>
      <link>/blog/what-happens-if-you-write-something-like-a-a-in-java/</link>
      <pubDate>Wed, 13 Sep 2006 07:58:27 +0000</pubDate>
      <guid>/blog/what-happens-if-you-write-something-like-a-a-in-java/</guid>
      <description>&lt;p&gt;I often happened to see discussions about this topic. Basically, here is the question. If you have such a code:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(a);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;What does it print?&lt;/p&gt;&#xA;&lt;p&gt;More than 50% of the programmers will answer 1, some of the remaining will say &amp;ldquo;I don&amp;rsquo;t know&amp;rdquo; and the others will say 0.&#xA;Well &amp;ldquo;the others&amp;rdquo; are right!&lt;/p&gt;&#xA;&lt;p&gt;Provided that such a code &lt;strong&gt;MUST NEVER BE WRITTEN&lt;/strong&gt;, let&amp;rsquo;s try to understand, for academic purposes, why it prints 0.&lt;/p&gt;</description>
    </item>
    <item>
      <title>POJO (Plain Old Java Object): The simpler...the better.</title>
      <link>/blog/pojo-plain-old-java-object-the-simplerthe-better/</link>
      <pubDate>Mon, 21 Aug 2006 15:31:02 +0000</pubDate>
      <guid>/blog/pojo-plain-old-java-object-the-simplerthe-better/</guid>
<<<<<<< HEAD
      <description>&lt;p&gt;A  POJO is simply an object built using a Java class that does not implement any special interfaces such as those defined&#xA;by the EJB 2 framework. An example of a POJO is a class composed by only:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Properties, representing the object&amp;rsquo;s state.&lt;/li&gt;&#xA;&lt;li&gt;Getter and setter methods for the properties.&lt;/li&gt;&#xA;&lt;li&gt;Business methods, representing behaviour.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Some properties can represent associations with other POJOs. Here is an example of implementation of the&#xA;&lt;code&gt;Person&lt;/code&gt; entity using a POJO:&lt;/p&gt;</description>
=======
      <description>A POJO is simply an object built using a Java class that does not implement any special interfaces such as those defined by the EJB 2 framework. An example of a POJO is a class composed by only:
Properties, representing the object&amp;rsquo;s state. Getter and setter methods for the properties. Business methods, representing behaviour. Some properties can represent associations with other POJOs. Here is an example of implementation of the Person entity using a POJO:</description>
>>>>>>> origin/master
    </item>
    <item>
      <title>How to force one or more metacharacters to be treated as ordinary characters in a Java Regular Expression (RegEx)</title>
      <link>/blog/how-to-force-a-metacharacter-to-be-treated-as-an-ordinary-character-in-a-java-regular-expression-regex/</link>
      <pubDate>Wed, 12 Jul 2006 13:24:03 +0000</pubDate>
      <guid>/blog/how-to-force-a-metacharacter-to-be-treated-as-an-ordinary-character-in-a-java-regular-expression-regex/</guid>
<<<<<<< HEAD
      <description>&lt;p&gt;When using RegEx in Java you might face the need of treating one or more metacharacters as ordinary characters.  As a reminder the metacharacters in a Java RegEx are:&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;([{^$|)?*+.&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;If you want to treat them as ordinary characters you have two options:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Escape the metacharacter with a backslash,&lt;/li&gt;&#xA;&lt;li&gt;Enclose the whole string that contains metacharacters within &lt;code&gt;Q&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;Q&lt;/code&gt; means: &amp;ldquo;quotes all characters until E&amp;rdquo;, while &lt;code&gt;E&lt;/code&gt; ends the quotes.&lt;/p&gt;</description>
=======
      <description>When using RegEx in Java you might face the need of treating one or more metacharacters as ordinary characters. As a reminder the metacharacters in a Java RegEx are:
([{^$|)?*+.
If you want to treat them as ordinary characters you have two options:
Escape the metacharacter with a backslash, Enclose the whole string that contains metacharacters within Q and E Q means: &amp;ldquo;quotes all characters until E&amp;rdquo;, while E ends the quotes.</description>
>>>>>>> origin/master
    </item>
    <item>
      <title>Using proguard obfuscator through the Wireless Toolkit</title>
      <link>/blog/using-proguard-obfuscator-through-the-wireless-toolkit/</link>
      <pubDate>Tue, 20 Jun 2006 20:53:38 +0000</pubDate>
      <guid>/blog/using-proguard-obfuscator-through-the-wireless-toolkit/</guid>
      <description>&lt;p&gt;When you develop an application you might want to protect your code. A good way to accomplish this is using obfuscation.&#xA;&lt;a href=&#34;https://proguard.sourceforge.net/&#34;&gt;Proguard&lt;/a&gt; is a good open-source tool you can use for this purpose.&#xA;To use it through the Wireless Toolkit (WTK), after downloading Proguard, you need to tell the WTK where it can find&#xA;the obfuscator. You can do that by editing the file &lt;strong&gt;ktools.properties&lt;/strong&gt; that you can find under &lt;strong&gt;%WTK%wtklibWindows&lt;/strong&gt;,&#xA;where &lt;strong&gt;%WTK%&lt;/strong&gt; is the root directory of the Wireless Toolkit. Basically, you just need to add the two following lines&#xA;to the aforementioned file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>The name-separator character in Java</title>
      <link>/blog/the-name-separator-character-in-java/</link>
      <pubDate>Tue, 02 May 2006 13:54:38 +0000</pubDate>
      <guid>/blog/the-name-separator-character-in-java/</guid>
      <description>&lt;p&gt;Java was born as a platform-independent programming language. Some features that grant the platform independence are&#xA;achieved using the APIs of the language itself. For example, to construct a filename path, you can use the public static&#xA;field separator of the &lt;code&gt;java.io.File&lt;/code&gt; class.&lt;/p&gt;&#xA;&lt;p&gt;Example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; java.&lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;File&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;separator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foldername&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; java.&lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;File&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;separator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filename&amp;#34;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;This produces the string &lt;code&gt;/foldername/filename&lt;/code&gt; under Unix-like systems and &lt;code&gt;\foldername\filename&lt;/code&gt; under Windows systems.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
