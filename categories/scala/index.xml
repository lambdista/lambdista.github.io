<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Alessandro Lacava</title>
    <link>http://www.alessandrolacava.com/categories/scala/</link>
    <description>Recent content in Scala on Alessandro Lacava</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Sep 2016 14:27:23 +0200</lastBuildDate>
    
	<atom:link href="http://www.alessandrolacava.com/categories/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Keep your code clean with Algebraic Data Types (ADTs)</title>
      <link>http://www.alessandrolacava.com/blog/keep-your-code-clean-with-algebraic-data-types-adts/</link>
      <pubDate>Wed, 14 Sep 2016 14:27:23 +0200</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/keep-your-code-clean-with-algebraic-data-types-adts/</guid>
      <description>Recently, Daniel Westheide wrote an interesting post about the abuse of the Option type in Scala. You can find it here. I couldn&amp;rsquo;t agree more with Daniel.
This short story is another example that demonstrates how using Option is not always the best option (pun intended).
I&amp;rsquo;m developing an advertising service for a customer using Scala. A simplified version of the Ad data structure is the following:
finalcaseclassAd(headline:String,description1:String,description2:String)  At some point they told me we need to support, by adding the headline2 field, two types of ad: standard and expanded.</description>
    </item>
    
    <item>
      <title>Scala: Seq, Map and Set as Functions</title>
      <link>http://www.alessandrolacava.com/blog/scala-seq-map-and-set-as-functions/</link>
      <pubDate>Fri, 23 Oct 2015 10:24:00 +0200</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/scala-seq-map-and-set-as-functions/</guid>
      <description>Yesterday my mate asked me: &amp;ldquo;I have a List[String] and a Map[String, Int] and I want a List[Int] where its values are those of the Map whose keys match the List[String] elements, maintaining the order. Should I use pattern matching?&amp;ldquo;. I know, the sentence is a bit convoluted but the code will make it clear, hopefully. Anyway, I replied: &amp;ldquo;No, you don&amp;rsquo;t need pattern matching, you just need this&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Scala case classes in depth</title>
      <link>http://www.alessandrolacava.com/blog/scala-case-classes-in-depth/</link>
      <pubDate>Fri, 22 May 2015 08:12:07 +0200</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/scala-case-classes-in-depth/</guid>
      <description>For this post I&amp;rsquo;ll consider the following simple case class unless otherwise specified: caseclassPerson(lastname:String,firstname:String,birthYear:Int) 
Common knowledge about case classes When you declare a case class the Scala compiler does the following for you:
 Creates a class and its companion object. Implements the apply method that you can use as a factory. This lets you create instances of the class without the new keyword. E.g.:  valp=Person(&amp;#34;Lacava&amp;#34;,&amp;#34;Alessandro&amp;#34;,1976)// instead of the slightly more verbose: valp=newPerson(&amp;#34;Lacava&amp;#34;,&amp;#34;Alessandro&amp;#34;,1976)   Prefixes all arguments, in the parameter list, with val.</description>
    </item>
    
    <item>
      <title>Scala Self Recursive Types</title>
      <link>http://www.alessandrolacava.com/blog/scala-self-recursive-types/</link>
      <pubDate>Mon, 30 Mar 2015 14:59:24 +0200</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/scala-self-recursive-types/</guid>
      <description>One of the advantages of using a statically typed language is that you can use the type system to enforce some constraints. Scala provides self-recursive types, aka F-bounded polymorphic types that&amp;ndash;along with self types&amp;ndash;let you put powerful constraint to your type definitions.
Self-recursive type definition Terminology apart, let me show you one of the use cases where this could be useful. Consider the following example which does not use a self-recursive type:</description>
    </item>
    
    <item>
      <title>Scala DSL for currency-related operations</title>
      <link>http://www.alessandrolacava.com/blog/scala-dsl-for-currency-related-operations/</link>
      <pubDate>Fri, 20 Feb 2015 15:09:06 +0100</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/scala-dsl-for-currency-related-operations/</guid>
      <description>A simple internal DSL in Scala for money-related operations Source code: Scala DSL for money-related operations
This Domain-Specific Language (DSL) lets you perform operations among different currencies, by transparently doing all internal conversions. The conversion map is injected implicitly by the client code.
Usage Example Here&amp;rsquo;s a simple usage example:
importcom.lambdista.money._importcom.lambdista.money.Currency._objectMain{defmain(args:Array[String]):Unit={valconversion:Conversion=Map((GBP,EUR)-&amp;gt;1.270,(EUR,USD)-&amp;gt;1.268,(GBP,USD)-&amp;gt;1.611)implicitvalconverter=Converter(conversion)valsumAndConversion1=100.001(USD)+200(EUR)toGBPprintln(s&amp;#34;sumAndConversion1: $sumAndConversion1&amp;#34;)valsumAndConversion2:Money=100(USD)+210.4(EUR)toEURprintln(s&amp;#34;sumAndConversion2: $sumAndConversion2&amp;#34;)valsum=100.001(USD)+200(EUR)valsimpleConversion=sum(GBP)println(s&amp;#34;simpleConversion: $simpleConversion&amp;#34;)valsumWithSimpleNumber=100(USD)+23.560println(s&amp;#34;sumWithSimpleNumber: $sumWithSimpleNumber&amp;#34;)valmultiplicationWithSimpleNumber=100(USD)*23println(s&amp;#34;multiplicationWithSimpleNumber: $multiplicationWithSimpleNumber&amp;#34;)valusd=Currency(&amp;#34;USD&amp;#34;)valmultiplication=100(usd)*23(EUR)println(s&amp;#34;multiplication: $multiplication&amp;#34;)valdivisionWithSimpleNumber=100(USD)/23println(s&amp;#34;divisionWithSimpleNumber: $divisionWithSimpleNumber&amp;#34;)valcomparison=100(USD)&amp;gt;90(EUR)println(s&amp;#34;100 USD &amp;gt; 90 EUR? $comparison&amp;#34;)}}  As you can see the client code just needs two simple imports and an implicit value of type Converter in order to use the DSL.</description>
    </item>
    
  </channel>
</rss>