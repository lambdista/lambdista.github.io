<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Alessandro Lacava</title>
    <link>/categories/scala/</link>
    <description>Recent content in Scala on Alessandro Lacava</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 May 2020 11:26:32 +0200</lastBuildDate>
    
	<atom:link href="/categories/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Desugaring for comprehensions (AKA for expressions)</title>
      <link>/blog/desugaring-for-comprehensions-aka-for-expressions/</link>
      <pubDate>Thu, 28 May 2020 11:26:32 +0200</pubDate>
      
      <guid>/blog/desugaring-for-comprehensions-aka-for-expressions/</guid>
      <description>Recently I stumbled upon a piece of Scala code that might leave you puzzled. Before showing you the code I must spend a few words about the compiler options.
Compiler options Getting into the glory details of each and every compiler option is out of the scope of this post (see compiler options). Suffice to say you can use some flags to make the Scala compiler stricter and help you find code deficiencies at compile time.</description>
    </item>
    
    <item>
      <title>Keep your code clean with algebraic data types (ADTs)</title>
      <link>/blog/keep-your-code-clean-with-algebraic-data-types-adts/</link>
      <pubDate>Wed, 14 Sep 2016 14:27:23 +0200</pubDate>
      
      <guid>/blog/keep-your-code-clean-with-algebraic-data-types-adts/</guid>
      <description>Recently, Daniel Westheide wrote an interesting post about the abuse of the Option type in Scala. You can find it here. I couldn&amp;rsquo;t agree more with Daniel.
This short story is another example that demonstrates how using Option is not always the best option (pun intended).
I&amp;rsquo;m developing an advertising service for a customer using Scala. A simplified version of the Ad data structure is the following:
final case class Ad( headline: String, description1: String, description2: String ) At some point they told me we need to support, by adding the headline2 field, two types of ad: standard and expanded.</description>
    </item>
    
    <item>
      <title>Scala: Seq, Map and Set as functions</title>
      <link>/blog/scala-seq-map-and-set-as-functions/</link>
      <pubDate>Fri, 23 Oct 2015 10:24:00 +0200</pubDate>
      
      <guid>/blog/scala-seq-map-and-set-as-functions/</guid>
      <description>Yesterday my mate asked me: &amp;ldquo;I have a List[String] and a Map[String, Int] and I want a List[Int] where its values are those of the Map whose keys match the List[String] elements, maintaining the order. Should I use pattern matching?&amp;quot;. I know, the sentence is a bit convoluted but the code will make it clear, hopefully. Anyway, I replied: &amp;ldquo;No, you don&amp;rsquo;t need pattern matching, you just need this&amp;rdquo;:
scala&amp;gt; val m = Map(&amp;#34;a&amp;#34; -&amp;gt; 1, &amp;#34;b&amp;#34; -&amp;gt; 2, &amp;#34;c&amp;#34; -&amp;gt; 3) m: scala.</description>
    </item>
    
    <item>
      <title>Scala case classes in depth</title>
      <link>/blog/scala-case-classes-in-depth/</link>
      <pubDate>Fri, 22 May 2015 08:12:07 +0200</pubDate>
      
      <guid>/blog/scala-case-classes-in-depth/</guid>
      <description>For this post I&amp;rsquo;ll consider the following simple case class unless otherwise specified: case class Person(lastname: String, firstname: String, birthYear: Int)
In this post:
 Common knowledge about case classes Not so common knowledge about case classes Defining a case class using the curried form Defining a case class with a private constructor For the most curious ones Final Notes  Common knowledge about case classes When you declare a case class the Scala compiler does the following for you:</description>
    </item>
    
    <item>
      <title>Scala self-recursive types</title>
      <link>/blog/scala-self-recursive-types/</link>
      <pubDate>Mon, 30 Mar 2015 14:59:24 +0200</pubDate>
      
      <guid>/blog/scala-self-recursive-types/</guid>
      <description>One of the advantages of using a statically typed language is that you can use the type system to enforce some constraints. Scala provides self-recursive types, aka F-bounded polymorphic types that&amp;ndash;along with self types&amp;ndash;let you put powerful constraint to your type definitions.
Self-recursive type definition Terminology apart, let me show you one of the use cases where this could be useful. Consider the following example which does not use a self-recursive type:</description>
    </item>
    
    <item>
      <title>Scala DSL for currency-related operations</title>
      <link>/blog/scala-dsl-for-currency-related-operations/</link>
      <pubDate>Fri, 20 Feb 2015 15:09:06 +0100</pubDate>
      
      <guid>/blog/scala-dsl-for-currency-related-operations/</guid>
      <description>A simple internal DSL in Scala for money-related operations Source code: Scala DSL for money-related operations
This Domain-Specific Language (DSL) lets you perform operations among different currencies, by transparently doing all internal conversions. The conversion map is injected implicitly by the client code.
Usage Example Here&amp;rsquo;s a simple usage example:
import com.lambdista.money._ import com.lambdista.money.Currency._ object Main { def main(args: Array[String]): Unit = { val conversion: Conversion = Map( (GBP, EUR) -&amp;gt; 1.</description>
    </item>
    
  </channel>
</rss>