<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Alessandro Lacava</title>
    <link>http://www.alessandrolacava.com/categories/javascript/</link>
    <description>Recent content in Javascript on Alessandro Lacava</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Mar 2008 13:41:13 +0000</lastBuildDate>
    
	<atom:link href="http://www.alessandrolacava.com/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to disable all the elements of a form using JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/how-to-disable-all-the-elements-of-a-form-using-javascript/</link>
      <pubDate>Mon, 31 Mar 2008 13:41:13 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-disable-all-the-elements-of-a-form-using-javascript/</guid>
      <description>Here&amp;rsquo;s a little JavaScript function that disables all form elements:
functiondisableElements(formName){varfm=document.forms[formName];for(vari=0;i&amp;lt;fm.elements.length;++i){fm.elements[i].disabled=true;}}  As you may have noticed the only parameter you need to pass is the form name.</description>
    </item>
    
    <item>
      <title>Capturing groups using regular expressions (RegEx) in JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/capturing-groups-in-regular-expressions-regex-in-javascript/</link>
      <pubDate>Mon, 26 Nov 2007 14:21:20 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/capturing-groups-in-regular-expressions-regex-in-javascript/</guid>
      <description>There are whole books about regular expressions so this post shouldn&amp;rsquo;t be intended as an exhaustive resource on the subject. It just shows how to extract a substring from a string using regular expressions in JavaScript so it must be considered just a tip not a tutorial on RegExp. Look at the following example:
varstr=&amp;#34;http://www.alessandrolacava.com/?code=ALE69&amp;#34;;varregex=/code=(w+)&amp;amp;?/;varresults=regex.exec(str);if(!results){alert(&amp;#34;no match&amp;#34;);}else{// first group alert(results[1]);}  The previous code extracts the string that follows the code= part of str.</description>
    </item>
    
    <item>
      <title>How to compute the timestamp in JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/how-to-compute-the-timestamp-in-javascript/</link>
      <pubDate>Tue, 09 Oct 2007 11:20:28 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-compute-the-timestamp-in-javascript/</guid>
      <description>Many sources use the term timestamp to refer specifically to Unix time, the number of seconds since 00:00:00 UTC on January 1, 1970. In JavaScript you can use the built-in object Date to compute this timestamp. Here follows an example:
varts=Date.UTC(&amp;#39;2007&amp;#39;,&amp;#39;09&amp;#39;,&amp;#39;28&amp;#39;)/ 1000;alert(ts);  The previous code displays an alert with the number of seconds between 00:00:00 UTC on January 1, 1970 and 00:00:00 UTC on October 28, 2007.
How it works:</description>
    </item>
    
    <item>
      <title>How to format a decimal number in JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/how-to-format-a-decimal-number-in-javascript/</link>
      <pubDate>Fri, 04 May 2007 11:02:16 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-format-a-decimal-number-in-javascript/</guid>
      <description>In JavaScript you can use a built-in method to format a decimal number so that it is displayed using, at most, x decimal places. Here is an example:
varnum=3.1356;varx=3;alert(num.toFixed(x));// displays 3.136  As you may have guessed the method is toFixed. It accepts one parameter which is the number of decimal places to take into account.
Note: The number gets rounded as you can notice by the example above.</description>
    </item>
    
    <item>
      <title>How to display an element to the center of the browser</title>
      <link>http://www.alessandrolacava.com/blog/how-to-display-an-element-to-the-center-of-the-browser/</link>
      <pubDate>Fri, 16 Feb 2007 10:55:53 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-display-an-element-to-the-center-of-the-browser/</guid>
      <description>Sometimes you might need to display an element, for example a div, to the center of the browser. Here is an example of how you can do it using JavaScript and CSS.
functioninit(){// Reference to the element varloading=document.getElementById(&amp;#34;loading&amp;#34;);// The div&amp;#39;s width, set within the CSS class varloadingWidth=loading.offsetWidth;// The div&amp;#39;s width, set within the CSS class varloadingHeight=loading.offsetHeight;// The browser&amp;#39;s body&amp;#39;s width vardocumentWidth=document.body.clientWidth;// The browser&amp;#39;s body&amp;#39;s height vardocumentHeight=document.body.clientHeight;// Position the element absolutely loading.</description>
    </item>
    
    <item>
      <title>How to detect the selected checkboxes using JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/how-to-detect-the-selected-checkboxes-using-javascript/</link>
      <pubDate>Tue, 16 Jan 2007 16:31:26 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-detect-the-selected-checkboxes-using-javascript/</guid>
      <description>Here is an example of how you can retrieve the selected checkboxes using a JavaScript function:
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;script&amp;gt;functiongetSelectedValues(elem){varelemNumber=document.myForm.test.length;varselectedElems=[];for(j=0;j&amp;lt;elemNumber;j++){if(elem[j].checked){selectedElems.push(elem[j].value);}}returnselectedElems;}&amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;formid=&amp;#34;myForm&amp;#34;name=&amp;#34;myForm&amp;#34;&amp;gt;&amp;lt;inputtype=&amp;#34;checkbox&amp;#34;id=&amp;#34;test&amp;#34;name=&amp;#34;myCheckBox&amp;#34;value=&amp;#34;test1&amp;#34;&amp;gt;Test 1 &amp;lt;inputtype=&amp;#34;checkbox&amp;#34;id=&amp;#34;test&amp;#34;name=&amp;#34;myCheckBox&amp;#34;value=&amp;#34;test2&amp;#34;&amp;gt;Test 2 &amp;lt;inputtype=&amp;#34;button&amp;#34;value=&amp;#34;Click Here&amp;#34;onclick=&amp;#34;alert(getSelectedValues(document.myForm.myCheckBox));&amp;#34;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;  In the previous example when the user clicks on the button the selected checkboxes are displayed through an alert.</description>
    </item>
    
    <item>
      <title>Sorting an array of objects with the sortBy method of Prototype</title>
      <link>http://www.alessandrolacava.com/blog/sorting-an-array-of-objects-with-the-sortby-method/</link>
      <pubDate>Mon, 20 Nov 2006 15:34:48 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/sorting-an-array-of-objects-with-the-sortby-method/</guid>
      <description>Here is an example of how easy it is to sort an array of objects using the Enumerable.sortBy method of the Prototype framework:
varobj1={lastName:&amp;#34;Lacava&amp;#34;,firstName:&amp;#34;Alessandro&amp;#34;};varobj2={lastName:&amp;#34;Brown&amp;#34;,firstName:&amp;#34;John&amp;#34;};varobj3={lastName:&amp;#34;Simpson&amp;#34;,firstName:&amp;#34;Bart&amp;#34;};vararr=[obj1,obj2,obj3];//order by last name varsorted=arr.sortBy(function(obj){returnobj.lastName.toLowerCase();});varstr=&amp;#34;&amp;#34;;sorted.each(function(obj,index){str+=index+1+&amp;#34; - &amp;#34;+obj.lastName+&amp;#34; &amp;#34;+obj.firstName;});//display the elements ordered by last name document.write(str);  </description>
    </item>
    
    <item>
      <title>How to include a .js file (a JavaScript file) within another .js file</title>
      <link>http://www.alessandrolacava.com/blog/how-to-include-a-js-file-a-javascript-file-within-another-js-file/</link>
      <pubDate>Fri, 22 Sep 2006 09:43:45 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-include-a-js-file-a-javascript-file-within-another-js-file/</guid>
      <description>Actually, there is no function you can call to include a JavaScript file within another one. This is the bad news. The good news is that you can use a trick to accomplish this task. Suppose you have two JavaScript files, say file1.js and file2.js. You want to include file1.js within file2.js because you want to use file1&amp;rsquo;s functions. Here is the code you can use:
//this is file2.js document.write(&amp;#34;&amp;lt;script src=&amp;#39;file1.</description>
    </item>
    
    <item>
      <title>How to hide/show an HTML form element depending on a combo box choice</title>
      <link>http://www.alessandrolacava.com/blog/how-to-hideshow-an-html-form-element-depending-on-a-combo-box-choice/</link>
      <pubDate>Fri, 01 Sep 2006 13:04:03 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-hideshow-an-html-form-element-depending-on-a-combo-box-choice/</guid>
      <description>This is an example of how you can show/hide an HTML form element depending on a combo box choice.
Put the following JavaScript code between your &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; section (or within a .js file if you prefer).
&amp;lt;scriptlanguage=&amp;#34;javascript&amp;#34;type=&amp;#34;text/javascript&amp;#34;&amp;gt;functionhide(){vartext=document.formName.textBox;if(document.formName.combo.value==&amp;#34;hide&amp;#34;){text.style.visibility=&amp;#34;hidden&amp;#34;;}else{text.style.visibility=&amp;#34;visible&amp;#34;;}}&amp;lt;/script&amp;gt;  The following snippet of code instead is the HTML code to use to call the hide function.
&amp;lt;formname=&amp;#34;formName&amp;#34;&amp;gt;&amp;lt;selectname=&amp;#34;combo&amp;#34;onchange=&amp;#34;hide()&amp;#34;&amp;gt;&amp;lt;optionvalue=&amp;#34;show&amp;#34;&amp;gt;show&amp;lt;/option&amp;gt;&amp;lt;optionvalue=&amp;#34;hide&amp;#34;&amp;gt;hide&amp;lt;/option&amp;gt;&amp;lt;/select&amp;gt;&amp;lt;inputtype=&amp;#34;text&amp;#34;name=&amp;#34;textBox&amp;#34;id=&amp;#34;textBox&amp;#34;/&amp;gt;&amp;lt;/form&amp;gt; 
It is very simple. When you choose hide the textbox disappears. If you choose show it appears.</description>
    </item>
    
    <item>
      <title>Calling a function of the opener window</title>
      <link>http://www.alessandrolacava.com/blog/calling-a-function-of-the-opener-window/</link>
      <pubDate>Thu, 27 Jul 2006 15:16:22 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/calling-a-function-of-the-opener-window/</guid>
      <description>It is possible, using JavaScript, to call a function pertaining to the opener window, that is the window that, calling window.open, opened the current window. The code to use is the following:
if(window.opener){window.close();window.opener.foo(&amp;#34;bar&amp;#34;);}  First it checks if the opener window is still open. In this case, it closes the current window and call the foo function on the opener window.</description>
    </item>
    
    <item>
      <title>Creating a Class definition in JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/creating-class-definition-in-javascript/</link>
      <pubDate>Mon, 24 Jul 2006 16:28:27 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/creating-class-definition-in-javascript/</guid>
      <description>There are different ways to define classes in JavaScript. However, this is the most widely used and accepted at the moment:
//class functionPerson(sLastName,sFirstName,iAge){this.lastName=sLastName;this.firstName=sFirstName;this.age=iAge;this.phoneNumbers=newArray();}//method Person.prototype.showFullName=function(){alert(this.lastName+&amp;#34; &amp;#34;+this.firstName);};//instances varoPerson1=newPerson(&amp;#34;Lacava&amp;#34;,&amp;#34;Alessandro&amp;#34;,30);varoPerson2=newPerson(&amp;#34;Brown&amp;#34;,&amp;#34;John&amp;#34;,50);oPerson1.phoneNumbers.push(&amp;#34;1234567&amp;#34;);oPerson2.phoneNumbers.push(&amp;#34;7654321&amp;#34;);oPerson1.showFullName();//outputs Lacava Alessandro alert(oPerson1.phoneNumbers);//outputs 1234567 oPerson2.showFullName();//outputs Brown John alert(oPerson2.phoneNumbers);//outputs 7654321  </description>
    </item>
    
    <item>
      <title>Creating an instance of the object used to make AJAX calls</title>
      <link>http://www.alessandrolacava.com/blog/creating-an-instance-of-the-object-used-to-make-ajax-calls/</link>
      <pubDate>Tue, 11 Jul 2006 15:54:40 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/creating-an-instance-of-the-object-used-to-make-ajax-calls/</guid>
      <description>Nowadays, AJAX is a ubiquitous technology in the IT world. When you need to create the object used to send asynchronous requests to a server, you might face the browser-difference problem. Here is a JavaScript function you could use to overcome this problem:
// The following function creates an XMLHttpRequest object functioncreateHttpRequest(){if(typeofXMLHttpRequest!=&amp;#34;undefined&amp;#34;)//NOT IE { returnnewXMLHttpRequest();}elseif(window.ActiveXObject)// IE { varsVersions=[&amp;#34;MSXML2.XMLHttp.5.0&amp;#34;,&amp;#34;MSXML2.XMLHttp.4.0&amp;#34;,&amp;#34;MSXML2.XMLHttp.3.0&amp;#34;,&amp;#34;MSXML2.XMLHttp&amp;#34;,&amp;#34;Microsoft.XMLHttp&amp;#34;];//try to get an instance of the newer version. //If it is not available go down till the oldest one for(vari=0;i&amp;lt;sVersions.</description>
    </item>
    
    <item>
      <title>The Function class in JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/the-function-class-in-javascript/</link>
      <pubDate>Wed, 14 Jun 2006 21:38:22 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/the-function-class-in-javascript/</guid>
      <description>Most programmers know how to define and use a function in JavaScript. For example the following function displays an alert containing the string passed in as a parameter:
functiondisplayAlert(sText){alert(sText);}// Then you call it this way displayAlert(&amp;#34;Hello World!&amp;#34;);  How many developers, however, know that JavaScript functions are actually objects? Indeed, you can define the previous function using the Function class:
vardisplayAlert=newFunction(&amp;#34;sText&amp;#34;,&amp;#34;alert(sText);&amp;#34;);//...and you call it the same way displayAlert(&amp;#34;Hello World!&amp;#34;);  For those who didn&amp;rsquo;t figure it out, the syntax of the Function class is the following:</description>
    </item>
    
    <item>
      <title>Using Javascript to detect the key pressed</title>
      <link>http://www.alessandrolacava.com/blog/using-javascript-to-detect-the-key-pressed/</link>
      <pubDate>Fri, 12 May 2006 12:23:55 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/using-javascript-to-detect-the-key-pressed/</guid>
      <description>Often it is useful to intercept the key pressed within an element of an HTML form, like a textbox and so on. For this purpose you can use Javascript to extract the code of the key that was pressed. Here is a snippet of code you can use&amp;ndash;of course adapting it to your needs.
functionkeyPressed(e){varcode;if(window.event){//IE code=e.keyCode;}else{//other browsers code=e.which;}//check, for example, if the Enter key was pressed (code 13) if(code==13){//Enter key pressed }else{//Another key pressed }}  Note: keyCode is used by Internet Explorer while which is used by the other browsers.</description>
    </item>
    
  </channel>
</rss>