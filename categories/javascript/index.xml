<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Alessandro Lacava</title>
    <link>http://www.alessandrolacava.com/categories/javascript/</link>
    <description>Recent content in JavaScript on Alessandro Lacava</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Mar 2008 13:41:13 +0000</lastBuildDate>
    
	<atom:link href="http://www.alessandrolacava.com/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to disable all the elements of a form using JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/how-to-disable-all-the-elements-of-a-form-using-javascript/</link>
      <pubDate>Mon, 31 Mar 2008 13:41:13 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-disable-all-the-elements-of-a-form-using-javascript/</guid>
      <description>Here&amp;rsquo;s a little JavaScript function that disables all form elements:
function disableElements(formName) { var fm = document.forms[formName]; for(var i = 0; i &amp;lt; fm.elements.length; ++i) { fm.elements[i].disabled = true; } }  As you may have noticed the only parameter you need to pass is the form name.</description>
    </item>
    
    <item>
      <title>Capturing groups using regular expressions (RegEx) in JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/capturing-groups-in-regular-expressions-regex-in-javascript/</link>
      <pubDate>Mon, 26 Nov 2007 14:21:20 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/capturing-groups-in-regular-expressions-regex-in-javascript/</guid>
      <description>There are whole books about regular expressions so this post shouldn&amp;rsquo;t be intended as an exhaustive resource on the subject. It just shows how to extract a substring from a string using regular expressions in JavaScript so it must be considered just a tip not a tutorial on RegExp. Look at the following example:
var str = &amp;#34;http://www.alessandrolacava.com/?code=ALE69&amp;#34;; var regex = /code=(w+)&amp;amp;?/; var results = regex.exec(str); if(!results){ alert(&amp;#34;no match&amp;#34;); } else{ // first group  alert(results[1]); }  The previous code extracts the string that follows the code= part of str.</description>
    </item>
    
    <item>
      <title>How to compute the timestamp in JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/how-to-compute-the-timestamp-in-javascript/</link>
      <pubDate>Tue, 09 Oct 2007 11:20:28 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-compute-the-timestamp-in-javascript/</guid>
      <description>Many sources use the term timestamp to refer specifically to Unix time, the number of seconds since 00:00:00 UTC on January 1, 1970. In JavaScript you can use the built-in object Date to compute this timestamp. Here follows an example:
var ts = Date.UTC(&amp;#39;2007&amp;#39;, &amp;#39;09&amp;#39;, &amp;#39;28&amp;#39;) / 1000; alert(ts);  The previous code displays an alert with the number of seconds between 00:00:00 UTC on January 1, 1970 and 00:00:00 UTC on October 28, 2007.</description>
    </item>
    
    <item>
      <title>How to format a decimal number in JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/how-to-format-a-decimal-number-in-javascript/</link>
      <pubDate>Fri, 04 May 2007 11:02:16 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-format-a-decimal-number-in-javascript/</guid>
      <description>In JavaScript you can use a built-in method to format a decimal number so that it is displayed using, at most, x decimal places. Here is an example:
var num = 3.1356; var x = 3; alert(num.toFixed(x)); // displays 3.136  As you may have guessed the method is toFixed. It accepts one parameter which is the number of decimal places to take into account.
Note: The number gets rounded as you can notice by the example above.</description>
    </item>
    
    <item>
      <title>How to display an element to the center of the browser</title>
      <link>http://www.alessandrolacava.com/blog/how-to-display-an-element-to-the-center-of-the-browser/</link>
      <pubDate>Fri, 16 Feb 2007 10:55:53 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-display-an-element-to-the-center-of-the-browser/</guid>
      <description>Sometimes you might need to display an element, for example a div, to the center of the browser. Here is an example of how you can do it using JavaScript and CSS.
function init() { // Reference to the element  var loading = document.getElementById(&amp;#34;loading&amp;#34;); // The div&amp;#39;s width, set within the CSS class  var loadingWidth = loading.offsetWidth; // The div&amp;#39;s width, set within the CSS class  var loadingHeight = loading.</description>
    </item>
    
    <item>
      <title>How to detect the selected checkboxes using JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/how-to-detect-the-selected-checkboxes-using-javascript/</link>
      <pubDate>Tue, 16 Jan 2007 16:31:26 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-detect-the-selected-checkboxes-using-javascript/</guid>
      <description>Here is an example of how you can retrieve the selected checkboxes using a JavaScript function:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script&amp;gt; function getSelectedValues(elem) { var elemNumber = document.myForm.test.length; var selectedElems = []; for(j = 0; j &amp;lt; elemNumber; j++) { if(elem[j].checked) { selectedElems.push(elem[j].value); } } return selectedElems; } &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form id=&amp;#34;myForm&amp;#34; name=&amp;#34;myForm&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; id=&amp;#34;test&amp;#34; name=&amp;#34;myCheckBox&amp;#34; value=&amp;#34;test1&amp;#34;&amp;gt; Test 1 &amp;lt;input type=&amp;#34;checkbox&amp;#34; id=&amp;#34;test&amp;#34; name=&amp;#34;myCheckBox&amp;#34; value=&amp;#34;test2&amp;#34;&amp;gt; Test 2 &amp;lt;input type=&amp;#34;button&amp;#34; value=&amp;#34;Click Here&amp;#34; onclick=&amp;#34;alert(getSelectedValues(document.</description>
    </item>
    
    <item>
      <title>Sorting an array of objects with the sortBy method of Prototype</title>
      <link>http://www.alessandrolacava.com/blog/sorting-an-array-of-objects-with-the-sortby-method/</link>
      <pubDate>Mon, 20 Nov 2006 15:34:48 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/sorting-an-array-of-objects-with-the-sortby-method/</guid>
      <description>Here is an example of how easy it is to sort an array of objects using the Enumerable.sortBy method of the Prototype framework:
var obj1 = { lastName : &amp;#34;Lacava&amp;#34;, firstName : &amp;#34;Alessandro&amp;#34; }; var obj2 = { lastName : &amp;#34;Brown&amp;#34;, firstName : &amp;#34;John&amp;#34; }; var obj3 = { lastName : &amp;#34;Simpson&amp;#34;, firstName : &amp;#34;Bart&amp;#34; }; var arr = [obj1, obj2, obj3]; //order by last name var sorted = arr.sortBy(function(obj) { return obj.</description>
    </item>
    
    <item>
      <title>How to include a .js file (a JavaScript file) within another .js file</title>
      <link>http://www.alessandrolacava.com/blog/how-to-include-a-js-file-a-javascript-file-within-another-js-file/</link>
      <pubDate>Fri, 22 Sep 2006 09:43:45 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-include-a-js-file-a-javascript-file-within-another-js-file/</guid>
      <description>Actually, there is no function you can call to include a JavaScript file within another one. This is the bad news. The good news is that you can use a trick to accomplish this task. Suppose you have two JavaScript files, say file1.js and file2.js. You want to include file1.js within file2.js because you want to use file1&amp;rsquo;s functions. Here is the code you can use:
//this is file2.js document.write(&amp;#34;&amp;lt;script src=&amp;#39;file1.</description>
    </item>
    
    <item>
      <title>How to hide/show an HTML form element depending on a combo box choice</title>
      <link>http://www.alessandrolacava.com/blog/how-to-hideshow-an-html-form-element-depending-on-a-combo-box-choice/</link>
      <pubDate>Fri, 01 Sep 2006 13:04:03 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/how-to-hideshow-an-html-form-element-depending-on-a-combo-box-choice/</guid>
      <description>This is an example of how you can show/hide an HTML form element depending on a combo box choice.
Put the following JavaScript code between your &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; section (or within a .js file if you prefer).
&amp;lt;script language=&amp;#34;javascript&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt; function hide() { var text = document.formName.textBox; if(document.formName.combo.value == &amp;#34;hide&amp;#34;) { text.style.visibility = &amp;#34;hidden&amp;#34;; } else { text.style.visibility = &amp;#34;visible&amp;#34;; } } &amp;lt;/script&amp;gt; The following snippet of code instead is the HTML code to use to call the hide function.</description>
    </item>
    
    <item>
      <title>Calling a function of the opener window</title>
      <link>http://www.alessandrolacava.com/blog/calling-a-function-of-the-opener-window/</link>
      <pubDate>Thu, 27 Jul 2006 15:16:22 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/calling-a-function-of-the-opener-window/</guid>
      <description>It is possible, using JavaScript, to call a function pertaining to the opener window, that is the window that, calling window.open, opened the current window. The code to use is the following:
if (window.opener) { window.close(); window.opener.foo(&amp;#34;bar&amp;#34;); }  First it checks if the opener window is still open. In this case, it closes the current window and call the foo function on the opener window.</description>
    </item>
    
    <item>
      <title>Creating a Class definition in JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/creating-class-definition-in-javascript/</link>
      <pubDate>Mon, 24 Jul 2006 16:28:27 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/creating-class-definition-in-javascript/</guid>
      <description>There are different ways to define classes in JavaScript. However, this is the most widely used and accepted at the moment:
//class function Person(sLastName, sFirstName, iAge) { this.lastName = sLastName; this.firstName = sFirstName; this.age = iAge; this.phoneNumbers = new Array(); } //method Person.prototype.showFullName = function() { alert(this.lastName + &amp;#34; &amp;#34; + this.firstName); }; //instances var oPerson1 = new Person(&amp;#34;Lacava&amp;#34;, &amp;#34;Alessandro&amp;#34;, 30); var oPerson2 = new Person(&amp;#34;Brown&amp;#34;, &amp;#34;John&amp;#34;, 50); oPerson1.phoneNumbers.push(&amp;#34;1234567&amp;#34;); oPerson2.phoneNumbers.push(&amp;#34;7654321&amp;#34;); oPerson1.</description>
    </item>
    
    <item>
      <title>Creating an instance of the object used to make AJAX calls</title>
      <link>http://www.alessandrolacava.com/blog/creating-an-instance-of-the-object-used-to-make-ajax-calls/</link>
      <pubDate>Tue, 11 Jul 2006 15:54:40 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/creating-an-instance-of-the-object-used-to-make-ajax-calls/</guid>
      <description>Nowadays, AJAX is a ubiquitous technology in the IT world. When you need to create the object used to send asynchronous requests to a server, you might face the browser-difference problem. Here is a JavaScript function you could use to overcome this problem:
// The following function creates an XMLHttpRequest object function createHttpRequest() { if (typeof XMLHttpRequest != &amp;#34;undefined&amp;#34;) //NOT IE {  return new XMLHttpRequest(); } else if (window.ActiveXObject) // IE {  var sVersions = [ &amp;#34;MSXML2.</description>
    </item>
    
    <item>
      <title>The Function class in JavaScript</title>
      <link>http://www.alessandrolacava.com/blog/the-function-class-in-javascript/</link>
      <pubDate>Wed, 14 Jun 2006 21:38:22 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/the-function-class-in-javascript/</guid>
      <description>Most programmers know how to define and use a function in JavaScript. For example the following function displays an alert containing the string passed in as a parameter:
function displayAlert(sText) { alert(sText); } // Then you call it this way displayAlert(&amp;#34;Hello World!&amp;#34;);  How many developers, however, know that JavaScript functions are actually objects? Indeed, you can define the previous function using the Function class:
var displayAlert = new Function(&amp;#34;sText&amp;#34;, &amp;#34;alert(sText);&amp;#34;); //.</description>
    </item>
    
    <item>
      <title>Using Javascript to detect the key pressed</title>
      <link>http://www.alessandrolacava.com/blog/using-javascript-to-detect-the-key-pressed/</link>
      <pubDate>Fri, 12 May 2006 12:23:55 +0000</pubDate>
      
      <guid>http://www.alessandrolacava.com/blog/using-javascript-to-detect-the-key-pressed/</guid>
      <description>Often it is useful to intercept the key pressed within an element of an HTML form, like a textbox and so on. For this purpose you can use Javascript to extract the code of the key that was pressed. Here is a snippet of code you can use&amp;ndash;of course adapting it to your needs.
function keyPressed(e){ var code; if(window.event){ //IE  code = e.keyCode; } else{ //other browsers  code = e.</description>
    </item>
    
  </channel>
</rss>