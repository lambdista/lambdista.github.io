<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Implicit | Alessandro Lacava]]></title>
  <link href="http://www.alessandrolacava.com/blog/categories/implicit/atom.xml" rel="self"/>
  <link href="http://www.alessandrolacava.com/"/>
  <updated>2015-06-04T11:28:34+02:00</updated>
  <id>http://www.alessandrolacava.com/</id>
  <author>
    <name><![CDATA[Alessandro Lacava]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala DSL for Currency-related Operations]]></title>
    <link href="http://www.alessandrolacava.com/blog/scala-dsl-for-currency-related-operations/"/>
    <updated>2015-02-20T15:09:06+01:00</updated>
    <id>http://www.alessandrolacava.com/blog/scala-dsl-for-currency-related-operations</id>
    <content type="html"><![CDATA[<h3>A simple internal DSL in Scala for money-related operations</h3>

<p>Source code: <a href="https://github.com/lambdista/money">Scala DSL for money-related operations</a></p>

<p>This Domain-Specific Language (DSL) lets you perform operations among different currencies,
by transparently doing all internal conversions. The conversion map is injected implicitly by the client code.</p>

<h3>Usage Example</h3>

<p>Here&rsquo;s a simple usage example:</p>

<pre><code class="scala">import com.lambdista.money._
import com.lambdista.money.Currency._

object Main {

  def main(args: Array[String]): Unit = {

    val conversion: Conversion = Map(
      (GBP, EUR) -&gt; 1.270,
      (EUR, USD) -&gt; 1.268,
      (GBP, USD) -&gt; 1.611
    )

    implicit val converter = Converter(conversion)

    val sumAndConversion1 = 100.001(USD) + 200(EUR) to GBP
    println(s"sumAndConversion1: $sumAndConversion1")

    val sumAndConversion2: Money = 100(USD) + 210.4(EUR) to EUR
    println(s"sumAndConversion2: $sumAndConversion2")

    val sum = 100.001(USD) + 200(EUR)
    val simpleConversion = sum(GBP)
    println(s"simpleConversion: $simpleConversion")

    val sumWithSimpleNumber = 100(USD) + 23.560
    println(s"sumWithSimpleNumber: $sumWithSimpleNumber")

    val multiplicationWithSimpleNumber = 100(USD) * 23
    println(s"multiplicationWithSimpleNumber: $multiplicationWithSimpleNumber")

    val usd = Currency("USD")

    val multiplication = 100(usd) * 23(EUR)
    println(s"multiplication: $multiplication")

    val divisionWithSimpleNumber = 100(USD) / 23
    println(s"divisionWithSimpleNumber: $divisionWithSimpleNumber")

    val comparison = 100(USD) &gt; 90(EUR)
    println(s"100 USD &gt; 90 EUR? $comparison")

  }

}
</code></pre>

<p>As you can see the client code just needs two simple imports and an implicit value of type <code>Converter</code>
in order to use the DSL. The operations shown in the previous code are only a few among the available ones.
Have a look at the <code>Money</code> class for a complete coverage.</p>

<p>You can find the source code here: <a href="https://github.com/lambdista/money">Scala DSL for money-related operations</a></p>
]]></content>
  </entry>
  
</feed>
