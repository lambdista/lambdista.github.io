<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: It | Alessandro Lacava]]></title>
  <link href="http://lambdista.github.io/blog/categories/it/atom.xml" rel="self"/>
  <link href="http://lambdista.github.io/"/>
  <updated>2015-05-08T13:58:21+02:00</updated>
  <id>http://lambdista.github.io/</id>
  <author>
    <name><![CDATA[Alessandro Lacava]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Combine JavaScript and a Template Engine for Flexible Web Apps]]></title>
    <link href="http://lambdista.github.io/blog/combine-javascript-and-a-template-engine-for-flexible-web-apps/"/>
    <updated>2011-10-26T17:34:17+02:00</updated>
    <id>http://lambdista.github.io/blog/combine-javascript-and-a-template-engine-for-flexible-web-apps</id>
    <content type="html"><![CDATA[<h3>Combine the power and simplicity of the TrimPath template engine with JavaScript and Ajax to develop next-generation web applications.</h3>

<p>Template engines (TEs) can be very useful in web development scenarios where you need to generate and format text automatically according to specific processing rules. These engines can also help you build your applications based on the Model-View-Controller (MVC) pattern, making them more robust and maintainable than applications based on spaghetti code. Most programming languages provide built-in or third-party TEs. Java, for example, has Velocity and FreeMarker, among others. For PHP, Smarty is the most used TE.</p>

<p>Go to <a href="http://www.developer.com/open/article.php/3864011/Combine-JavaScript-and-a-Template-Engine-for-Flexible-Web-Apps.htm">developer.com</a> to read the rest of the article: <strong>Combine JavaScript and a Template Engine for Flexible Web Apps</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Script.aculo.us Controls: Do Your Web Users a Favor]]></title>
    <link href="http://lambdista.github.io/blog/script-aculo-us-controls-do-your-web-users-a-favor/"/>
    <updated>2011-10-26T17:32:32+02:00</updated>
    <id>http://lambdista.github.io/blog/script-aculo-us-controls-do-your-web-users-a-favor</id>
    <content type="html"><![CDATA[<h3>Learn how to integrate Script.aculo.us web controls into your web applications to make the end-user experience more pleasant.</h3>

<p>In a previous DevX article, I wrote about the JavaScript framework Prototype, which aims to ease the development of dynamic web applications. That article ended with just a few words about Script.aculo.us, which is a fantastic UI library based on Prototype. This article gives Script.aculo.us its due by examining the web controls it provides: autocompleters, sliders, and in-place editors.</p>

<p>Script.aculo.us is a pretty big library, so no single article can cover it completely. However, the knowledge you will gain will enable you to leverage the power of Script.aculo.us web controls to improve the end-user experience.</p>

<p>Go to <a href="http://www.devx.com/webdev/Article/37574">DevX</a> to read the rest of the article: <strong>Script.aculo.us Controls: Do Your Web Users a Favor</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Will Your Next Web Application Be a Google Gadget?]]></title>
    <link href="http://lambdista.github.io/blog/will-your-next-web-application-be-a-google-gadget/"/>
    <updated>2011-10-26T17:31:04+02:00</updated>
    <id>http://lambdista.github.io/blog/will-your-next-web-application-be-a-google-gadget</id>
    <content type="html"><![CDATA[<h3>Learn how to leverage the Google Gadget API to make your web applications more reachable. As an example, you&rsquo;ll see how to build a real-world gadget that fetches and displays the DevX feeds.</h3>

<p>Since AJAX first appeared, developer interest in JavaScript has increased exponentially—and toolsets for building functionality in JavaScript have burgeoned as well. One of the latest tools for JavaScript-related development is Google Gadgets. Many web sites already provide gadgets built with the Google tools, and you can, too. This article shows you how to develop a Google Gadget that fetches DevX RSS feeds and displays them to the user.</p>

<p>Go to <a href="http://www.devx.com/webdev/Article/35007">DevX</a> to read the rest of the article: <strong>Will Your Next Web Application Be a Google Gadget?</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Productivity Perks Behind Prototype's Popularity]]></title>
    <link href="http://lambdista.github.io/blog/the-productivity-perks-behind-prototypes-popularity-2/"/>
    <updated>2011-10-26T17:29:31+02:00</updated>
    <id>http://lambdista.github.io/blog/the-productivity-perks-behind-prototypes-popularity-2</id>
    <content type="html"><![CDATA[<h3>Learn how to leverage the popular Prototype JavaScript framework to speed up your AJAX-based development. You&rsquo;ll see how to use JavaScript in an object-oriented way.</h3>

<p>The Prototype home page claims that &ldquo;Prototype is a JavaScript framework that aims to ease the development of dynamic Web applications.&rdquo; By using many object-oriented paradigms such as class-driven development and inheritance to enable JavaScript application development, Prototype completely accomplishes its aim. In fact, this framework contains a lot of useful functionalities, which you cannot help but apply to every application you develop once you&rsquo;ve started using them.</p>

<p>Prototype&rsquo;s main claim to fame is its rich AJAX (Asynchronous JavaScript and XML) library, which simplifies the now popular Web development technique for making non-blocking calls to the server through JavaScript. (It topped the recent Ajaxian.com 2006 Survey as the most popular AJAX framework.) Of course, everything you can do with Prototype you also can do using plain JavaScript—upon which Prototype is built. But why would you want to complicate your life? For example, which would you rather type to accomplish the same task: document.getElementById(&ldquo;myElement&rdquo;) or $(&ldquo;myElement&rdquo;)? If you answered $(&ldquo;myElement&rdquo;), then read the remainder of this article for an in-depth discussion of some useful Prototype functions—$ is just one.</p>

<p>Go to <a href="http://www.devx.com/AJAXRoundup/Article/33174">DevX</a> to read the rest of the article: <strong>The Productivity Perks Behind Prototype&rsquo;s Popularity</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed Up Your AJAX-based Apps With JSON]]></title>
    <link href="http://lambdista.github.io/blog/speed-up-your-ajax-based-apps-with-json/"/>
    <updated>2011-10-26T16:54:43+02:00</updated>
    <id>http://lambdista.github.io/blog/speed-up-your-ajax-based-apps-with-json</id>
    <content type="html"><![CDATA[<h3>Find out how to improve your Web application performance by leveraging AJAX and JSON. In particular, you&rsquo;ll see the advantages of using JSON over XML as a lightweight JavaScript data-interchange format.</h3>

<p>JSON stands for JavaScript Object Notation and is a lightweight data-interchange format. Because it is text-based it is easy for humans to read and write, and it has a regular syntax that&rsquo;s easy to parse programmatically. JSON is basically a subset of JavaScript and, as you&rsquo;ll see, is even easier to parse than XML.</p>

<p>Go to <a href="http://www.devx.com/webdev/Article/32651">DevX</a> to read the rest of the article: <strong>Speed Up Your AJAX-based Apps with JSON</strong>.</p>
]]></content>
  </entry>
  
</feed>
