<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | Alessandro Lacava]]></title>
  <link href="http://lambdista.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://lambdista.github.io/"/>
  <updated>2015-05-08T14:09:47+02:00</updated>
  <id>http://lambdista.github.io/</id>
  <author>
    <name><![CDATA[Alessandro Lacava]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala's Self-recursive Types]]></title>
    <link href="http://lambdista.github.io/blog/scala-self-recursive-types/"/>
    <updated>2015-03-30T14:59:24+02:00</updated>
    <id>http://lambdista.github.io/blog/scala-self-recursive-types</id>
    <content type="html"><![CDATA[<p>One of the advantages of using a statically typed language is that you can use the type system to enforce
some constraints. Scala provides <em>self-recursive types</em>, aka <em>F-bounded polymorphic types</em>
that&ndash;along with <em>self types</em>&ndash;let you put powerful constraint to your type definitions.</p>

<h2>Self-recursive type definition</h2>

<p>Terminology apart, let me show you one of the use cases where this could be useful. Consider the following example
which does not use a self-recursive type:</p>

<pre><code class="scala">trait Doubler[T] {
  def double: T
}
</code></pre>

<pre><code class="scala">case class Square(base: Double) extends Doubler[Square] {
  override def double: Square = Square(base * 2)
}
</code></pre>

<p>So far so good, the compiler will not complain. The problem is that it won&rsquo;t complain even if you write
something outrageous like the following code:</p>

<pre><code class="scala">case class Person(firstname: String, lastname: String, age: Int)

case class Square(base: Double) extends Doubler[Person] {
  override def double: Person = Person("John", "Smith", 42)
}
</code></pre>

<p>You want to avoid something like that by enforcing a compile-time check. Enters a self-recursive type:</p>

<pre><code class="scala">trait Doubler[T &lt;: Doubler[T]] {
  def double: T
}   
</code></pre>

<p>By using this definition of <code>Doubler</code> you&rsquo;re saying: &ldquo;Hey, if someone tries to extends <code>Doubler</code> with a type
which doesn&rsquo;t extend <code>Doubler</code> in turn (hence <em>self-recursive</em>), do not compile it&rdquo;.
In this case the previous definition of <code>Square</code>, which extends <code>Doubler[Person]</code>, doesn&rsquo;t compile.</p>

<p>Note that self-recursive types are not specific to Scala. Indeed Java uses them too.
Take, for example, the <code>Enum</code> definition:</p>

<pre><code class="java">public abstract class Enum&lt;E extends Enum&lt;E&gt;&gt; implements Comparable&lt;E&gt;, Serializable {
...
}
</code></pre>

<p><code>E extends Enum&lt;E&gt;</code> in <em>Javanese</em> means exactly <code>E &lt;: Enum[E]</code></p>

<h2>Self type definition</h2>

<p>F-bounded polymorphic types are of great help but sometimes they are not enough to enforce the constraints you need.
Indeed, the previous definition of <code>Doubler</code> has still one problem. Consider the next code:</p>

<pre><code class="scala">trait Doubler[T &lt;: Doubler[T]] {
  def double: T
}

case class Square(base: Double) extends Doubler[Square] {
  override def double: Square = Square(base * 2)
}

case class Apple(kind: String) extends Doubler[Square] {
  override def double: Square = Square(5)
}
</code></pre>

<p>Can you spot the problem? Look at the <code>Apple</code> definition, it extends <code>Doubler[Square]</code> instead of <code>Doubler[Apple]</code>.</p>

<p>This code compiles because it respects the constraint put by the <code>Doubler</code> definition.
Indeed <code>Square</code> extends <code>Doubler</code> so it can be used in <code>Apple</code>. Sometimes this is what you want in which case
the self-recursive type will do. In cases when you donâ€™t want this to happen a self type can work this out:</p>

<pre><code class="scala">trait Doubler[T &lt;: Doubler[T]] { self: T =&gt;
  def double: T
}
</code></pre>

<p>Now if you try to compile the previous definition of <code>Apple</code> the compiler will complain by saying something like:</p>

<pre><code class="scala">error: illegal inheritance;
 self-type Apple does not conform to Doubler[Square]'s selftype Square
       case class Apple(kind: String) extends Doubler[Square] {
                                              ^
</code></pre>

<h2>Conclusions</h2>

<p>If you&rsquo;re thinking: &ldquo;Come on! I would never extend <code>Apple</code> that way because I know what I meant when I wrote
my <code>Doubler</code> abstraction. I don&rsquo;t need then the self type annotation and, since I know what I&rsquo;m doing,
I don&rsquo;t need the self-recursive type either&rdquo;. Well you may be right but I&rsquo;d have two objections:</p>

<ol>
<li><p>Generally you are not the only one working on a project and, anyway, a good rule of thumb is to design your
software as if you&rsquo;re designing a public API. In this case you want to be sure no one will use your API in the wrong way.</p></li>
<li><p>Compilers are implemented by smart guys, generally. Having the compiler help by your side is
always a good thing in my humble opinion.</p></li>
</ol>


<p>Are there alternatives to this type of problems? Yes indeed, <em>Type Classes</em>, which is by the way the option I prefer.
But this is another story for a future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Internal DSLs In Scala]]></title>
    <link href="http://lambdista.github.io/blog/introduction-to-internal-dsls-in-scala/"/>
    <updated>2015-03-26T09:41:48+01:00</updated>
    <id>http://lambdista.github.io/blog/introduction-to-internal-dsls-in-scala</id>
    <content type="html"><![CDATA[<p>My introductory article on developing an internal DSL in Scala for currency-related operations
on <a href="http://www.devx.com/enterprise/introduction-to-internal-dsls-in-scala.html">DevX</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Functional Programming In Scala]]></title>
    <link href="http://lambdista.github.io/blog/introduction-to-functional-programming-in-scala/"/>
    <updated>2015-02-28T09:29:30+01:00</updated>
    <id>http://lambdista.github.io/blog/introduction-to-functional-programming-in-scala</id>
    <content type="html"><![CDATA[<p>My introductory article on Functional Programming in Scala
on <a href="http://www.devx.com/enterprise/introduction-to-functional-programming-in-scala.html">DevX</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala DSL for Currency-related Operations]]></title>
    <link href="http://lambdista.github.io/blog/scala-dsl-for-currency-related-operations/"/>
    <updated>2015-02-20T15:09:06+01:00</updated>
    <id>http://lambdista.github.io/blog/scala-dsl-for-currency-related-operations</id>
    <content type="html"><![CDATA[<h3>A simple internal DSL in Scala for money-related operations</h3>

<p>Source code: <a href="https://github.com/lambdista/money">Scala DSL for money-related operations</a></p>

<p>This Domain-Specific Language (DSL) lets you perform operations among different currencies,
by transparently doing all internal conversions. The conversion map is injected implicitly by the client code.</p>

<h3>Usage Example</h3>

<p>Here&rsquo;s a simple usage example:</p>

<pre><code class="scala">import com.lambdista.money._
import com.lambdista.money.Currency._

object Main {

  def main(args: Array[String]): Unit = {

    val conversion: Conversion = Map(
      (GBP, EUR) -&gt; 1.270,
      (EUR, USD) -&gt; 1.268,
      (GBP, USD) -&gt; 1.611
    )

    implicit val converter = Converter(conversion)

    val sumAndConversion1 = 100.001(USD) + 200(EUR) to GBP
    println(s"sumAndConversion1: $sumAndConversion1")

    val sumAndConversion2: Money = 100(USD) + 210.4(EUR) to EUR
    println(s"sumAndConversion2: $sumAndConversion2")

    val sum = 100.001(USD) + 200(EUR)
    val simpleConversion = sum(GBP)
    println(s"simpleConversion: $simpleConversion")

    val sumWithSimpleNumber = 100(USD) + 23.560
    println(s"sumWithSimpleNumber: $sumWithSimpleNumber")

    val multiplicationWithSimpleNumber = 100(USD) * 23
    println(s"multiplicationWithSimpleNumber: $multiplicationWithSimpleNumber")

    val usd = Currency("USD")

    val multiplication = 100(usd) * 23(EUR)
    println(s"multiplication: $multiplication")

    val divisionWithSimpleNumber = 100(USD) / 23
    println(s"divisionWithSimpleNumber: $divisionWithSimpleNumber")

    val comparison = 100(USD) &gt; 90(EUR)
    println(s"100 USD &gt; 90 EUR? $comparison")

  }

}
</code></pre>

<p>As you can see the client code just needs two simple imports and an implicit value of type <code>Converter</code>
in order to use the DSL. The operations shown in the previous code are only a few among the available ones.
Have a look at the <code>Money</code> class for a complete coverage.</p>

<p>You can find the source code here: <a href="https://github.com/lambdista/money">Scala DSL for money-related operations</a></p>
]]></content>
  </entry>
  
</feed>
