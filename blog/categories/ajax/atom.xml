<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ajax | Alessandro Lacava]]></title>
  <link href="http://www.alessandrolacava.com/blog/categories/ajax/atom.xml" rel="self"/>
  <link href="http://www.alessandrolacava.com/"/>
  <updated>2015-05-12T14:27:54+02:00</updated>
  <id>http://www.alessandrolacava.com/</id>
  <author>
    <name><![CDATA[Alessandro Lacava]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Productivity Perks Behind Prototype's Popularity]]></title>
    <link href="http://www.alessandrolacava.com/blog/the-productivity-perks-behind-prototypes-popularity-2/"/>
    <updated>2011-10-26T17:29:31+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/the-productivity-perks-behind-prototypes-popularity-2</id>
    <content type="html"><![CDATA[<h3>Learn how to leverage the popular Prototype JavaScript framework to speed up your AJAX-based development. You&rsquo;ll see how to use JavaScript in an object-oriented way.</h3>

<p>The Prototype home page claims that &ldquo;Prototype is a JavaScript framework that aims to ease the development of dynamic Web applications.&rdquo; By using many object-oriented paradigms such as class-driven development and inheritance to enable JavaScript application development, Prototype completely accomplishes its aim. In fact, this framework contains a lot of useful functionalities, which you cannot help but apply to every application you develop once you&rsquo;ve started using them.</p>

<p>Prototype&rsquo;s main claim to fame is its rich AJAX (Asynchronous JavaScript and XML) library, which simplifies the now popular Web development technique for making non-blocking calls to the server through JavaScript. (It topped the recent Ajaxian.com 2006 Survey as the most popular AJAX framework.) Of course, everything you can do with Prototype you also can do using plain JavaScript—upon which Prototype is built. But why would you want to complicate your life? For example, which would you rather type to accomplish the same task: document.getElementById(&ldquo;myElement&rdquo;) or $(&ldquo;myElement&rdquo;)? If you answered $(&ldquo;myElement&rdquo;), then read the remainder of this article for an in-depth discussion of some useful Prototype functions—$ is just one.</p>

<p>Go to <a href="http://www.devx.com/AJAXRoundup/Article/33174">DevX</a> to read the rest of the article: <strong>The Productivity Perks Behind Prototype&rsquo;s Popularity</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed Up Your AJAX-based Apps With JSON]]></title>
    <link href="http://www.alessandrolacava.com/blog/speed-up-your-ajax-based-apps-with-json/"/>
    <updated>2011-10-26T16:54:43+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/speed-up-your-ajax-based-apps-with-json</id>
    <content type="html"><![CDATA[<h3>Find out how to improve your Web application performance by leveraging AJAX and JSON. In particular, you&rsquo;ll see the advantages of using JSON over XML as a lightweight JavaScript data-interchange format.</h3>

<p>JSON stands for JavaScript Object Notation and is a lightweight data-interchange format. Because it is text-based it is easy for humans to read and write, and it has a regular syntax that&rsquo;s easy to parse programmatically. JSON is basically a subset of JavaScript and, as you&rsquo;ll see, is even easier to parse than XML.</p>

<p>Go to <a href="http://www.devx.com/webdev/Article/32651">DevX</a> to read the rest of the article: <strong>Speed Up Your AJAX-based Apps with JSON</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an Instance of the Object Used to Make AJAX Calls]]></title>
    <link href="http://www.alessandrolacava.com/blog/creating-an-instance-of-the-object-used-to-make-ajax-calls/"/>
    <updated>2006-07-11T17:54:40+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/creating-an-instance-of-the-object-used-to-make-ajax-calls</id>
    <content type="html"><![CDATA[<p>Nowadays, AJAX is a ubiquitous technology in the IT world. When you need to create the object used to send asynchronous
requests to a server, you might face the browser-difference problem. Here is a JavaScript function you could use to
overcome this problem:</p>

<pre><code class="javascript ">// The following function creates an XMLHttpRequest object
function createHttpRequest() {
  if (typeof XMLHttpRequest != "undefined") //NOT IE {
    return new XMLHttpRequest();
  }
  else if (window.ActiveXObject) // IE {
    var sVersions = [ "MSXML2.XMLHttp.5.0",
    "MSXML2.XMLHttp.4.0","MSXML2.XMLHttp.3.0",
    "MSXML2.XMLHttp","Microsoft.XMLHttp"
    ];

    //try to get an instance of the newer version.
    //If it is not available go down till the oldest one
    for (var i = 0; i &lt; sVersions.length; i++) {
      try {
        var ret = new ActiveXObject(sVersions[i]);
        return ret;
      }
      catch (oException) {
        //Do nothing. Just go on trying with the older versions
      }
    }
  }
  //if it gets here then no version is available
  alert("XMLHttpRequest object could not be created.");
}
</code></pre>

<p>As you can see this function creates the correct instance of the <code>XMLHttpRequest</code> object. If the browser is not
Internet Explorer then it just instantiates the <code>XMLHttpRequest</code> object, otherwise it tries to create the correct
ActiveX object used by IE to represent <code>XMLHttpRequest</code>. In this case it tries to instatiates the object from the
newer version going down till the oldest one.</p>

<p>Note: Finally, IE7 seems to use the same object used by other browsers, that is <code>XMLHttpRequest</code>. However,
I advise you to use the above code just to be sure that older browser versions get the correct object in any
case&ndash;provided that at least one is available!</p>
]]></content>
  </entry>
  
</feed>
