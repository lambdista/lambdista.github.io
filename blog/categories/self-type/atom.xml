<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Self-type | Alessandro Lacava]]></title>
  <link href="http://www.alessandrolacava.com/blog/categories/self-type/atom.xml" rel="self"/>
  <link href="http://www.alessandrolacava.com/"/>
  <updated>2015-06-03T18:48:24+02:00</updated>
  <id>http://www.alessandrolacava.com/</id>
  <author>
    <name><![CDATA[Alessandro Lacava]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala's Self-recursive Types]]></title>
    <link href="http://www.alessandrolacava.com/blog/scala-self-recursive-types/"/>
    <updated>2015-03-30T14:59:24+02:00</updated>
    <id>http://www.alessandrolacava.com/blog/scala-self-recursive-types</id>
    <content type="html"><![CDATA[<p>One of the advantages of using a statically typed language is that you can use the type system to enforce
some constraints. Scala provides <em>self-recursive types</em>, aka <em>F-bounded polymorphic types</em>
that&ndash;along with <em>self types</em>&ndash;let you put powerful constraint to your type definitions.</p>

<h2>Self-recursive type definition</h2>

<p>Terminology apart, let me show you one of the use cases where this could be useful. Consider the following example
which does not use a self-recursive type:</p>

<pre><code class="scala">trait Doubler[T] {
  def double: T
}
</code></pre>

<pre><code class="scala">case class Square(base: Double) extends Doubler[Square] {
  override def double: Square = Square(base * 2)
}
</code></pre>

<p>So far so good, the compiler will not complain. The problem is that it won&rsquo;t complain even if you write
something outrageous like the following code:</p>

<pre><code class="scala">case class Person(firstname: String, lastname: String, age: Int)

case class Square(base: Double) extends Doubler[Person] {
  override def double: Person = Person("John", "Smith", 42)
}
</code></pre>

<p>You want to avoid something like that by enforcing a compile-time check. Enters a self-recursive type:</p>

<pre><code class="scala">trait Doubler[T &lt;: Doubler[T]] {
  def double: T
}   
</code></pre>

<p>By using this definition of <code>Doubler</code> you&rsquo;re saying: &ldquo;Hey, if someone tries to extends <code>Doubler</code> with a type
which doesn&rsquo;t extend <code>Doubler</code> in turn (hence <em>self-recursive</em>), do not compile it&rdquo;.
In this case the previous definition of <code>Square</code>, which extends <code>Doubler[Person]</code>, doesn&rsquo;t compile.</p>

<p>Note that self-recursive types are not specific to Scala. Indeed Java uses them too.
Take, for example, the <code>Enum</code> definition:</p>

<pre><code class="java">public abstract class Enum&lt;E extends Enum&lt;E&gt;&gt; implements Comparable&lt;E&gt;, Serializable {
...
}
</code></pre>

<p><code>E extends Enum&lt;E&gt;</code> in <em>Javanese</em> means exactly <code>E &lt;: Enum[E]</code></p>

<h2>Self type definition</h2>

<p>F-bounded polymorphic types are of great help but sometimes they are not enough to enforce the constraints you need.
Indeed, the previous definition of <code>Doubler</code> has still one problem. Consider the next code:</p>

<pre><code class="scala">trait Doubler[T &lt;: Doubler[T]] {
  def double: T
}

case class Square(base: Double) extends Doubler[Square] {
  override def double: Square = Square(base * 2)
}

case class Apple(kind: String) extends Doubler[Square] {
  override def double: Square = Square(5)
}
</code></pre>

<p>Can you spot the problem? Look at the <code>Apple</code> definition, it extends <code>Doubler[Square]</code> instead of <code>Doubler[Apple]</code>.</p>

<p>This code compiles because it respects the constraint put by the <code>Doubler</code> definition.
Indeed <code>Square</code> extends <code>Doubler</code> so it can be used in <code>Apple</code>. Sometimes this is what you want in which case
the self-recursive type will do. In cases when you donâ€™t want this to happen a self type can work this out:</p>

<pre><code class="scala">trait Doubler[T &lt;: Doubler[T]] { self: T =&gt;
  def double: T
}
</code></pre>

<p>Now if you try to compile the previous definition of <code>Apple</code> the compiler will complain by saying something like:</p>

<pre><code class="scala">error: illegal inheritance;
 self-type Apple does not conform to Doubler[Square]'s selftype Square
       case class Apple(kind: String) extends Doubler[Square] {
                                              ^
</code></pre>

<h2>Conclusions</h2>

<p>If you&rsquo;re thinking: &ldquo;Come on! I would never extend <code>Apple</code> that way because I know what I meant when I wrote
my <code>Doubler</code> abstraction. I don&rsquo;t need then the self type annotation and, since I know what I&rsquo;m doing,
I don&rsquo;t need the self-recursive type either&rdquo;. Well you may be right but I&rsquo;d have two objections:</p>

<ol>
<li><p>Generally you are not the only one working on a project and, anyway, a good rule of thumb is to design your
software as if you&rsquo;re designing a public API. In this case you want to be sure no one will use your API in the wrong way.</p></li>
<li><p>Compilers are implemented by smart guys, generally. Having the compiler help by your side is
always a good thing in my humble opinion.</p></li>
</ol>


<p>Are there alternatives to this type of problems? Yes indeed, <em>Type Classes</em>, which is by the way the option I prefer.
But this is another story for a future post.</p>
]]></content>
  </entry>
  
</feed>
